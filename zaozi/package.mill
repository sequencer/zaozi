// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: 2025 Jiuyang Liu <liu@jiuyang.me>
package build.zaozi

import mill._
import mill.scalalib.TestModule.Utest
import mill.scalalib._
import mill.scalalib.scalafmt._
import contrib.jmh.JmhModule
import os.Path

import build.{circtlib, v, LitModule, ZaoziPublishModule}
import build.zaozi.testlib

object `package` extends ScalaModule with ScalafmtModule with ZaoziPublishModule { m =>
  def scalaVersion = Task(v.scala)
  def mvnDeps      = Seq(v.mainargs, v.oslib, v.upickle, v.sourcecode)
  def moduleDeps   = Seq(circtlib)

  // Due to a bug of macro in utest, we have to disable -Xcheck-macros to make dotty happy
  override def scalacOptions: T[Seq[String]] = Task(
    super.scalacOptions() ++ Seq("-Xprint-suspension", "-experimental", "-Xcheck-macros")
  )

  object lit extends ScalaModule with ScalafmtModule {
    def scalaVersion = Task(v.scala)
    def moduleDeps   = Seq(m)
    override def forkArgs: T[Seq[String]] = Task(
      super.forkArgs() ++ circtlib.forkArgs()
    )
    object tests extends LitModule {
      def scalaVersion:    T[String]       = Task(m.scalaVersion())
      def runClasspath:    T[Seq[os.Path]] = Task(lit.runClasspath().map(_.path))
      def javaLibraryPath: T[Seq[os.Path]] = Task(
        (circtlib.libraryPaths()).map(_.path)
      )
      def javaHome:        T[os.Path]      = Task(os.Path(sys.props("java.home")))
      def litDir:          T[os.Path]      = Task(moduleDir)
      def litConfigIn:     T[PathRef]      = Task.Source(moduleDir / "lit.site.cfg.py.in")
    }
  }

  object benchmark extends ScalaModule with JmhModule {

    def scalaVersion   = Task(v.scala)
    def moduleDeps     = Seq(tests)
    def jmhCoreVersion = Task(v.jmh)
    override def scalacOptions: T[Seq[String]] = Task(super.scalacOptions() :+ "-experimental")
    override def forkArgs:      T[Seq[String]] = Task(
      super.forkArgs() ++ circtlib.forkArgs()
    )
    def runJmh(args: String*) = Task.Command {
      val (_, resources) = generateBenchmarkSources()
      mill.util.Jvm.callProcess(
        mainClass = "org.openjdk.jmh.Main",
        classPath = (runClasspath() ++ generatorDeps()).map(_.path) ++
          Seq(compileGeneratedSources().path, resources.path),
        mainArgs = args,
        cwd = Task.ctx().dest,
        jvmArgs = forkArgs(),
        javaHome = javaHome().map(_.path),
        stdin = os.Inherit,
        stdout = os.Inherit
      )
      ()
    }
  }

  object tests extends ScalaTests with ScalafmtModule with Utest {
    override def scalacOptions: T[Seq[String]] = Task(super.scalacOptions().filterNot(_ == "-Xcheck-macros"))

    def mvnDeps    = Seq(v.utest)
    def moduleDeps = Seq(testlib)

    override def forkArgs: T[Seq[String]] = Task(
      super.forkArgs() ++ circtlib.forkArgs()
    )
  }
}
