//| mvnDeps:
//| - com.lihaoyi::mill-contrib-jmh:$MILL_VERSION

// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: 2025 Jiuyang Liu <liu@jiuyang.me>
package build

import mill._
import mill.scalalib.TestModule.Utest
import mill.scalalib._
import mill.scalalib.publish._
import mill.scalalib.scalafmt._
import contrib.jmh.JmhModule
import os.Path

object v {
  val scala      = "3.6.2"
  val mainargs   = mvn"com.lihaoyi::mainargs:0.7.6"
  val oslib      = mvn"com.lihaoyi::os-lib:0.11.3"
  val upickle    = mvn"com.lihaoyi::upickle:4.0.2"
  val utest      = mvn"com.lihaoyi::utest:0.8.4"
  val sourcecode = mvn"com.lihaoyi::sourcecode:0.4.2"
  val fastparse  = mvn"com.lihaoyi::fastparse:3.1.1"
  val pprint     = mvn"com.lihaoyi::pprint:0.9.0"
  val jmh        = "1.35"
}

trait ZaoziPublishModule extends PublishModule {
  def publishVersion: mill.T[String] = "0.0.1-SNAPSHOT"

  def pomSettings = Task(
    PomSettings(
      description = artifactName(),
      organization = "me.jiuyang",
      url = "https://github.com/sequencer/zaozi",
      licenses = Seq(License.`Apache-2.0`),
      versionControl = VersionControl.github("sequencer", "zaozi"),
      developers = Seq(
        Developer("sequencer", "Jiuyang Liu", "https://github.com/sequencer"),
        Developer("unlsycn", "Yuhang Zeng", "https://github.com/unlsycn"),
        Developer("Clo91eaf", "Jianhao Ye", "https://github.com/Clo91eaf")
      )
    )
  )
}

// Panama API
trait PanamaModule extends JavaModule {
  val license = Seq(
    "# SPDX-License-Identifier: Apache-2.0",
    "# SPDX-FileCopyrightText: 2025 Jiuyang Liu <liu@jiuyang.me>",
    ""
  )

  // API to regenerate all C-API from headers
  def dumpIncludes(): Command[Unit] = Task.Command {
    val f = os.temp()
    os.proc(
      Seq(jextractBinary().toString, header().path.toString)
        ++ includePaths().flatMap(p => Seq("-I", p.path.toString))
        ++ Seq("--dump-includes", f.toString)
    ).call()

    includeFiles().foreach { file =>
      os.remove(file.path)
      os.write(file.path, "")
    }

    os.read
      .lines(f)
      .filter(s => s.nonEmpty && !s.startsWith("#"))
      .filter(str => !str.contains("jextract"))
      .foreach { str =>
        val writeStr = str.replaceFirst("--include.+? ", "") + "\n"
        if (str.startsWith("--include-constant")) os.write.append(includeConstantsFile().path, writeStr)
        if (str.startsWith("--include-function")) os.write.append(includeFunctionsFile().path, writeStr)
        if (str.startsWith("--include-struct")) os.write.append(includeStructsFile().path, writeStr)
        if (str.startsWith("--include-typedef")) os.write.append(includeTypedefsFile().path, writeStr)
        if (str.startsWith("--include-union")) os.write.append(includeUnionsFile().path, writeStr)
        if (str.startsWith("--include-var")) os.write.append(includeVarsFile().path, writeStr)
      }
  }

  override def generatedSources: T[Seq[PathRef]] = Task {
    super.generatedSources() ++ {
      // @formatter:off
      os.proc(
        Seq(jextractBinary().toString, header().path.toString)
          ++ includePaths().flatMap(p => Seq("-I", p.path.toString))
          ++ Seq(
          "-t", target(),
          "--header-class-name", headerClassName(),
          "--source",
          "--output", Task.dest.toString
        ) ++ includeFunctions().flatMap(f => Seq("--include-function", f)) ++
          includeConstants().flatMap(f => Seq("--include-constant", f)) ++
          includeStructs().flatMap(f => Seq("--include-struct", f)) ++
          includeTypedefs().flatMap(f => Seq("--include-typedef", f)) ++
          includeUnions().flatMap(f => Seq("--include-union", f)) ++
          includeVars().flatMap(f => Seq("--include-var", f)) ++
          linkLibraries().flatMap(l => Seq("-l", l))
      ).call(Task.dest)
      // @formatter:on
      Seq(PathRef(Task.dest))
    }
  }

  override def javacOptions: T[Seq[String]] = Task(
    super.javacOptions() ++ Seq("--enable-preview", "--release", "21")
  )

  override def forkArgs: T[Seq[String]] = Task(
    super.forkArgs() ++ Seq("--enable-native-access=ALL-UNNAMED", "--enable-preview")
      ++ Some(s"-Djava.library.path=${libraryPaths().map(_.path).distinct.mkString(":")}")
  )

  def includeFiles = Task(
    Seq(
      includeConstantsFile(),
      includeFunctionsFile(),
      includeStructsFile(),
      includeTypedefsFile(),
      includeUnionsFile(),
      includeVarsFile()
    )
  )

  def includeConstantsFile: T[PathRef]
  def includeConstants:     T[IndexedSeq[String]] = Task(
    os.read
      .lines(includeConstantsFile().path)
      .filter(s => s.nonEmpty && !s.startsWith("#"))
      .map(_.replaceFirst(" .*", ""))
  )

  def includeFunctionsFile: T[PathRef]
  def includeFunctions:     T[IndexedSeq[String]] = Task(
    os.read
      .lines(includeFunctionsFile().path)
      .filter(s => s.nonEmpty && !s.startsWith("#"))
      .map(_.replaceFirst(" .*", ""))
  )

  def includeStructsFile: T[PathRef]
  def includeStructs:     T[IndexedSeq[String]] = Task(
    os.read
      .lines(includeStructsFile().path)
      .filter(s => s.nonEmpty && !s.startsWith("#"))
      .map(_.replaceFirst(" .*", ""))
  )

  def includeTypedefsFile: T[PathRef]
  def includeTypedefs:     T[IndexedSeq[String]] = Task(
    os.read
      .lines(includeTypedefsFile().path)
      .filter(s => s.nonEmpty && !s.startsWith("#"))
      .map(_.replaceFirst(" .*", ""))
  )

  def includeUnionsFile: T[PathRef]
  def includeUnions:     T[IndexedSeq[String]] = Task(
    os.read.lines(includeUnionsFile().path).filter(s => s.nonEmpty && !s.startsWith("#")).map(_.replaceFirst(" .*", ""))
  )

  def includeVarsFile: T[PathRef]
  def includeVars:     T[IndexedSeq[String]] = Task(
    os.read.lines(includeVarsFile().path).filter(s => s.nonEmpty && !s.startsWith("#")).map(_.replaceFirst(" .*", ""))
  )

  def linkLibrariesFile: T[PathRef]
  def linkLibraries:     T[IndexedSeq[String]] = Task(
    os.read.lines(linkLibrariesFile().path).filter(s => s.nonEmpty && !s.startsWith("#")).map(_.replaceFirst(" .*", ""))
  )

  def target: T[String]

  def headerClassName: T[String]

  def header: T[PathRef]

  def includePaths: T[Seq[PathRef]]

  def libraryPaths: T[Seq[PathRef]]

  def jextractBinary: T[Path]
}

// Lit-based Test
trait LitModule extends Module {
  def scalaVersion:    T[String]
  def runClasspath:    T[Seq[os.Path]]
  def javaLibraryPath: T[Seq[os.Path]]
  def javaHome:        T[os.Path]
  def litDir:          T[os.Path]
  def litConfigIn:     T[PathRef]
  def litConfig:       T[PathRef] = Task {
    os.write(
      Task.dest / "lit.site.cfg.py",
      os.read(litConfigIn().path)
        .replaceAll("@SCALA_VERSION@", scalaVersion())
        .replaceAll("@RUN_CLASSPATH@", runClasspath().mkString(","))
        .replaceAll("@JAVA_HOME@", javaHome().toString)
        .replaceAll("@JAVA_LIBRARY_PATH@", javaLibraryPath().mkString(","))
        .replaceAll("@LIT_DIR@", litDir().toString)
    )
    PathRef(Task.dest)
  }
  def litBinary          = Task(
    os.Path(
      Task.env.getOrElse("LIT_INSTALL_PATH", "LIT_INSTALL_PATH not found, you are not in the nix env?")
    ) / "bin" / "lit"
  )
  def run(args: String*) = Task.Command(
    // Due to a data race in https://github.com/VirtusLab/scala-cli/blob/8ab834ab3832ab680e72dcf85c685bf01516a97c/modules/build/src/main/scala/scala/build/LocalRepo.scala#L78, we disable parallelism to work around it for now
    os.proc(litBinary().toString(), litConfig().path, "-a", "-j 1")
      .call(Task.dest, stdout = os.ProcessOutput.Readlines(line => Task.ctx().log.info("[lit] " + line)))
  )
}
