// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: 2025 Jianhao Ye <Clo91eaf@qq.com>
package me.jiuyang.rvcover

import me.jiuyang.smtlib.default.{*, given}
import me.jiuyang.smtlib.tpe.*

import org.llvm.mlir.scalalib.capi.ir.{Block, Context, Location, LocationApi, Operation, Type, Value, given}

import java.lang.foreign.Arena

// format: off
def isFp()(using Arena, Context, Block, Recipe): Ref[Bool] = isRVD() | isRV64D() | isRVF() | isRV64F() | isRVQ() | isRV64Q() | isRVZFH() | isRV64ZFH() | isRVDZFH() | isRVQZFH()
def isDp()(using Arena, Context, Block, Recipe): Ref[Bool] = isRVD() | isRV64D() | isRVDZFH() 
def isBranch()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = isBne() | isBeq() | isBlt() | isBltu() | isBge() | isBgeu()
def isRXS2()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = isAmomaxuW() | isAmoandW() | isAmoorW() | isAmoxorW() | isAmoswapW() | isLrW() | isAmomaxW() | isAmoaddW() | isAmominW() | isAmominuW() | isScW() | isLrD() | isAmomaxD() | isAmoswapD() | isAmoxorD() | isAmoandD() | isAmominD() | isAmoorD() | isAmoaddD() | isAmomaxuD() | isAmominuD() | isScD() | isHsvW() | isHsvB() | isHfenceVvma() | isHsvH() | isHfenceGvma() | isHsvD() | isOr() | isSrl() | isSltu() | isSra() | isSb() | isAdd() | isXor() | isBeq() | isBge() | isSw() | isBlt() | isBgeu() | isBltu() | isBne() | isSub() | isAnd() | isSlt() | isSh() | isSll() | isAddw() | isSd() | isSllw() | isSraw() | isSubw() | isSrlw() | isMulhsu() | isRem() | isDiv() | isMul() | isMulhu() | isMulh() | isRemu() | isDivu() | isRemuw() | isDivw() | isDivuw() | isMulw() | isRemw() | isSfenceVma() | isCzeroNez() | isCzeroEqz()
def isAmo()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = isRVA() | isRV64A()
def isAluDoubleWords()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = isAmomaxuW() | isAmoandW() | isAmoorW() | isAmoxorW() | isAmoswapW() | isLrW() | isAmomaxW() | isAmoaddW() | isAmominW() | isAmominuW() | isScW() | isLrD() | isAmomaxD() | isAmoswapD() | isAmoxorD() | isAmoandD() | isAmominD() | isAmoorD() | isAmoaddD() | isAmomaxuD() | isAmominuD() | isScD() | isFld() | isFsd() | isFsw() | isFlw() | isHsvW() | isHsvB() | isHlvHu() | isHlvB() | isHlvW() | isHsvH() | isHlvH() | isHlvBu() | isHsvD() | isHlvD() | isHlvWu() | isLhu() | isSb() | isLw() | isSw() | isLh() | isLbu() | isLb() | isSh() | isLd() | isSd() | isLwu() | isSfenceVma() | isFsh() | isFlh()
def isMem()(using Arena, Context, Block, Index, Recipe): Ref[Bool] =isAmomaxuW() | isAmoandW() | isAmoorW() | isAmoxorW() | isAmoswapW() | isLrW() | isAmomaxW() | isAmoaddW() | isAmominW() | isAmominuW() | isScW() | isLrD() | isAmomaxD() | isAmoswapD() | isAmoxorD() | isAmoandD() | isAmominD() | isAmoorD() | isAmoaddD() | isAmomaxuD() | isAmominuD() | isScD() | isFld() | isFsd() | isFsw() | isFlw() | isHsvW() | isHsvB() | isHlvHu() | isHlvB() | isHlvW() | isHsvH() | isHlvH() | isHlvBu() | isHsvD() | isHlvD() | isHlvWu() | isLhu() | isSb() | isLw() | isSw() | isLh() | isLbu() | isLb() | isSh() | isLd() | isSd() | isLwu() | isSfenceVma() | isFsh() | isFlh()
def isRfs1()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = isFminD() | isFsgnjD() | isFleD() | isFnmsubD() | isFaddD() | isFcvtWD() | isFmsubD() | isFmulD() | isFcvtWuD() | isFeqD() | isFmaxD() | isFnmaddD() | isFcvtDS() | isFcvtSD() | isFmaddD() | isFsgnjxD() | isFltD() | isFsgnjnD() | isFsubD() | isFsqrtD() | isFclassD() | isFdivD() | isFmvXD() | isFcvtLuD() | isFcvtLD() | isFcvtDH() | isFcvtHD() | isFnmsubS() | isFsgnjxS() | isFmsubS() | isFsgnjnS() | isFdivS() | isFminS() | isFsqrtS() | isFclassS() | isFcvtWuS() | isFmaxS() | isFeqS() | isFleS() | isFmaddS() | isFsgnjS() | isFaddS() | isFltS() | isFmvXW() | isFnmaddS() | isFmulS() | isFcvtWS() | isFsubS() | isFcvtLuS() | isFcvtLS() | isFeqH() | isFsgnjxH() | isFcvtWH() | isFcvtHS() | isFdivH() | isFclassH() | isFsgnjH() | isFmulH() | isFsubH() | isFcvtWuH() | isFaddH() | isFmaxH() | isFsgnjnH() | isFmvXH() | isFcvtSH() | isFmsubH() | isFminH() | isFsqrtH() | isFltH() | isFnmaddH() | isFmaddH() | isFnmsubH() | isFleH() | isFcvtLH() | isFcvtLuH()
def isRfs2()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = isFminD() | isFsgnjD() | isFleD() | isFnmsubD() | isFaddD() | isFmsubD() | isFmulD() | isFeqD() | isFmaxD() | isFnmaddD() | isFmaddD() | isFsgnjxD() | isFltD() | isFsgnjnD() | isFsubD() | isFsqrtD() | isFdivD() | isFnmsubS() | isFsgnjxS() | isFmsubS() | isFsgnjnS() | isFdivS() | isFminS() | isFsqrtS() | isFmaxS() | isFeqS() | isFleS() | isFmaddS() | isFsgnjS() | isFaddS() | isFltS() | isFnmaddS() | isFmulS() | isFsubS() | isFeqH() | isFsgnjxH() | isFdivH() | isFsgnjH() | isFmulH() | isFsubH() | isFaddH() | isFmaxH() | isFsgnjnH() | isFmsubH() | isFminH() | isFsqrtH() | isFltH() | isFnmaddH() | isFmaddH() | isFnmsubH() | isFleH()
def isRfs3()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = isFnmsubD() | isFmsubD() | isFnmaddD() | isFmaddD() | isFnmsubS() | isFmsubS() | isFmaddS() | isFnmaddS() | isFmsubH() | isFnmaddH() | isFmaddH() | isFnmsubH()
def isWfd()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = isFminD() | isFsgnjD() | isFnmsubD() | isFaddD() | isFmsubD() | isFld() | isFmulD() | isFmaxD() | isFcvtDWu() | isFnmaddD() | isFcvtDS() | isFcvtSD() | isFmaddD() | isFsgnjxD() | isFsgnjnD() | isFsubD() | isFsqrtD() | isFcvtDW() | isFdivD() | isFcvtDLu() | isFmvDX() | isFcvtDL() | isFcvtDH() | isFcvtHD() | isFnmsubS() | isFsgnjxS() | isFmsubS() | isFsgnjnS() | isFdivS() | isFminS() | isFsqrtS() | isFmaxS() | isFcvtSWu() | isFmvWX() | isFmaddS() | isFsgnjS() | isFaddS() | isFnmaddS() | isFcvtSW() | isFlw() | isFmulS() | isFsubS() | isFcvtSLu() | isFcvtSL() | isFsgnjxH() | isFcvtHS() | isFdivH() | isFsgnjH() | isFmulH() | isFsubH() | isFlh() | isFaddH() | isFmaxH() | isFsgnjnH() | isFcvtSH() | isFcvtHWu() | isFcvtHW() | isFmsubH() | isFminH() | isFsqrtH() | isFnmaddH() | isFmaddH() | isFnmsubH() | isFmvHX() | isFcvtHLu() | isFcvtHL()
def isMultiple()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = isMulhsu() | isMul() | isMulhu() | isMulh() | isMulw()
def isDivide()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = isRem() | isDiv() | isRemu() | isDivu() | isRemuw() | isDivw() | isDivuw() | isRemw() | isMultiple()
def isWxd()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = isAmomaxuW() | isAmoandW() | isAmoorW() | isAmoxorW() | isAmoswapW() | isLrW() | isAmomaxW() | isAmoaddW() | isAmominW() | isAmominuW() | isScW() | isLrD() | isAmomaxD() | isAmoswapD() | isAmoxorD() | isAmoandD() | isAmominD() | isAmoorD() | isAmoaddD() | isAmomaxuD() | isAmominuD() | isScD() | isFleD() | isFcvtWD() | isFcvtWuD() | isFeqD() | isFltD() | isFclassD() | isFmvXD() | isFcvtLuD() | isFcvtLD() | isFclassS() | isFcvtWuS() | isFeqS() | isFleS() | isFltS() | isFmvXW() | isFcvtWS() | isFcvtLuS() | isFcvtLS() | isHlvHu() | isHlvxHu() | isHlvB() | isHlvxWu() | isHlvW() | isHlvH() | isHlvBu() | isHlvD() | isHlvWu() | isOr() | isSrl() | isOri() | isLhu() | isSltu() | isSra() | isLw() | isAdd() | isXor() | isAndi() | isSltiu() | isLh() | isJalr() | isLui() | isLbu() | isSub() | isAnd() | isAuipc() | isXori() | isSlti() | isSlt() | isAddi() | isLb() | isJal() | isSll() | isSrliRV32I() | isSrliRV64I() | isSraiRV32I() | isSraiRV64I() | isSlliRV32I() | isSlliRV64I() | isLd() | isAddw() | isSraiw() | isLwu() | isSllw() | isSraw() | isSubw() | isSrlw() | isAddiw() | isSrliw() | isSlliw() | isMulhsu() | isRem() | isDiv() | isMul() | isMulhu() | isMulh() | isRemu() | isDivu() | isRemuw() | isDivw() | isDivuw() | isMulw() | isRemw() | isFeqH() | isFcvtWH() | isFclassH() | isFcvtWuH() | isFmvXH() | isFltH() | isFleH() | isFcvtLH() | isFcvtLuH() | isCsrrc() | isCsrrci() | isCsrrs() | isCsrrw() | isCsrrsi() | isCsrrwi() | isCzeroNez() | isCzeroEqz() | isVsetvl() | isVsetivli() | isVsetvli() | isVmvXS() | isVcpopM() | isVfirstM()