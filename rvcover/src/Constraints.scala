// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: 2025 Jianhao Ye <Clo91eaf@qq.com>
package me.jiuyang.rvcover

import me.jiuyang.smtlib.default.{*, given}
import me.jiuyang.smtlib.tpe.*

import org.llvm.mlir.scalalib.capi.ir.{Block, Context, Location, LocationApi, Operation, Type, Value, given}

import java.lang.foreign.Arena

// format: off
// ================= AUTO GENERATED BY GenerateConstraints.scala =======================
def amoopRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].amoop >= start.S & summon[Index].amoop < end.S
def aqRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].aq >= start.S & summon[Index].aq < end.S
def aqrlRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].aqrl >= start.S & summon[Index].aqrl < end.S
def bimm12hiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].bimm12hi >= start.S & summon[Index].bimm12hi < end.S
def bimm12loRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].bimm12lo >= start.S & summon[Index].bimm12lo < end.S
def bsRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].bs >= start.S & summon[Index].bs < end.S
def cBimm9hiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cBimm9hi >= start.S & summon[Index].cBimm9hi < end.S
def cBimm9loRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cBimm9lo >= start.S & summon[Index].cBimm9lo < end.S
def cImm12Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cImm12 >= start.S & summon[Index].cImm12 < end.S
def cImm6hiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cImm6hi >= start.S & summon[Index].cImm6hi < end.S
def cImm6loRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cImm6lo >= start.S & summon[Index].cImm6lo < end.S
def cIndexRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cIndex >= start.S & summon[Index].cIndex < end.S
def cNzimm10hiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cNzimm10hi >= start.S & summon[Index].cNzimm10hi < end.S
def cNzimm10loRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cNzimm10lo >= start.S & summon[Index].cNzimm10lo < end.S
def cNzimm18hiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cNzimm18hi >= start.S & summon[Index].cNzimm18hi < end.S
def cNzimm18loRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cNzimm18lo >= start.S & summon[Index].cNzimm18lo < end.S
def cNzimm6hiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cNzimm6hi >= start.S & summon[Index].cNzimm6hi < end.S
def cNzimm6loRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cNzimm6lo >= start.S & summon[Index].cNzimm6lo < end.S
def cNzuimm10Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cNzuimm10 >= start.S & summon[Index].cNzuimm10 < end.S
def cNzuimm5Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cNzuimm5 >= start.S & summon[Index].cNzuimm5 < end.S
def cNzuimm6hiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cNzuimm6hi >= start.S & summon[Index].cNzuimm6hi < end.S
def cNzuimm6loRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cNzuimm6lo >= start.S & summon[Index].cNzuimm6lo < end.S
def cRlistRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cRlist >= start.S & summon[Index].cRlist < end.S
def cRs1N0Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cRs1N0 >= start.S & summon[Index].cRs1N0 < end.S
def cRs2Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cRs2 >= start.S & summon[Index].cRs2 < end.S
def cRs2N0Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cRs2N0 >= start.S & summon[Index].cRs2N0 < end.S
def cSpimmRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cSpimm >= start.S & summon[Index].cSpimm < end.S
def cSreg1Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cSreg1 >= start.S & summon[Index].cSreg1 < end.S
def cSreg2Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cSreg2 >= start.S & summon[Index].cSreg2 < end.S
def cUimm1Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cUimm1 >= start.S & summon[Index].cUimm1 < end.S
def cUimm10spSRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cUimm10spS >= start.S & summon[Index].cUimm10spS < end.S
def cUimm10sphiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cUimm10sphi >= start.S & summon[Index].cUimm10sphi < end.S
def cUimm10sploRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cUimm10splo >= start.S & summon[Index].cUimm10splo < end.S
def cUimm2Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cUimm2 >= start.S & summon[Index].cUimm2 < end.S
def cUimm7hiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cUimm7hi >= start.S & summon[Index].cUimm7hi < end.S
def cUimm7loRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cUimm7lo >= start.S & summon[Index].cUimm7lo < end.S
def cUimm8hiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cUimm8hi >= start.S & summon[Index].cUimm8hi < end.S
def cUimm8loRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cUimm8lo >= start.S & summon[Index].cUimm8lo < end.S
def cUimm8spSRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cUimm8spS >= start.S & summon[Index].cUimm8spS < end.S
def cUimm8sphiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cUimm8sphi >= start.S & summon[Index].cUimm8sphi < end.S
def cUimm8sploRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cUimm8splo >= start.S & summon[Index].cUimm8splo < end.S
def cUimm9hiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cUimm9hi >= start.S & summon[Index].cUimm9hi < end.S
def cUimm9loRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cUimm9lo >= start.S & summon[Index].cUimm9lo < end.S
def cUimm9spSRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cUimm9spS >= start.S & summon[Index].cUimm9spS < end.S
def cUimm9sphiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cUimm9sphi >= start.S & summon[Index].cUimm9sphi < end.S
def cUimm9sploRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].cUimm9splo >= start.S & summon[Index].cUimm9splo < end.S
def csrRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].csr >= start.S & summon[Index].csr < end.S
def fmRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].fm >= start.S & summon[Index].fm < end.S
def funct2Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].funct2 >= start.S & summon[Index].funct2 < end.S
def funct3Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].funct3 >= start.S & summon[Index].funct3 < end.S
def funct7Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].funct7 >= start.S & summon[Index].funct7 < end.S
def imm12Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].imm12 >= start.S & summon[Index].imm12 < end.S
def imm12hiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].imm12hi >= start.S & summon[Index].imm12hi < end.S
def imm12loRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].imm12lo >= start.S & summon[Index].imm12lo < end.S
def imm2Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].imm2 >= start.S & summon[Index].imm2 < end.S
def imm20Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].imm20 >= start.S & summon[Index].imm20 < end.S
def imm3Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].imm3 >= start.S & summon[Index].imm3 < end.S
def imm4Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].imm4 >= start.S & summon[Index].imm4 < end.S
def imm5Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].imm5 >= start.S & summon[Index].imm5 < end.S
def imm6Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].imm6 >= start.S & summon[Index].imm6 < end.S
def jimm20Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].jimm20 >= start.S & summon[Index].jimm20 < end.S
def nfRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].nf >= start.S & summon[Index].nf < end.S
def opcodeRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].opcode >= start.S & summon[Index].opcode < end.S
def predRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].pred >= start.S & summon[Index].pred < end.S
def rcRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].rc >= start.S & summon[Index].rc < end.S
def rdRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].rd >= start.S & summon[Index].rd < end.S
def rdN0Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].rdN0 >= start.S & summon[Index].rdN0 < end.S
def rdN2Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].rdN2 >= start.S & summon[Index].rdN2 < end.S
def rdPRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].rdP >= start.S & summon[Index].rdP < end.S
def rdRs1Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].rdRs1 >= start.S & summon[Index].rdRs1 < end.S
def rdRs1N0Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].rdRs1N0 >= start.S & summon[Index].rdRs1N0 < end.S
def rdRs1PRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].rdRs1P >= start.S & summon[Index].rdRs1P < end.S
def rlRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].rl >= start.S & summon[Index].rl < end.S
def rmRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].rm >= start.S & summon[Index].rm < end.S
def rnumRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].rnum >= start.S & summon[Index].rnum < end.S
def rs1Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].rs1 >= start.S & summon[Index].rs1 < end.S
def rs1N0Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].rs1N0 >= start.S & summon[Index].rs1N0 < end.S
def rs1PRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].rs1P >= start.S & summon[Index].rs1P < end.S
def rs2Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].rs2 >= start.S & summon[Index].rs2 < end.S
def rs2PRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].rs2P >= start.S & summon[Index].rs2P < end.S
def rs3Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].rs3 >= start.S & summon[Index].rs3 < end.S
def rtRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].rt >= start.S & summon[Index].rt < end.S
def shamtdRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].shamtd >= start.S & summon[Index].shamtd < end.S
def shamtqRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].shamtq >= start.S & summon[Index].shamtq < end.S
def shamtwRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].shamtw >= start.S & summon[Index].shamtw < end.S
def shamtw4Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].shamtw4 >= start.S & summon[Index].shamtw4 < end.S
def simm5Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].simm5 >= start.S & summon[Index].simm5 < end.S
def succRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].succ >= start.S & summon[Index].succ < end.S
def vdRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].vd >= start.S & summon[Index].vd < end.S
def vmRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].vm >= start.S & summon[Index].vm < end.S
def vs1Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].vs1 >= start.S & summon[Index].vs1 < end.S
def vs2Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].vs2 >= start.S & summon[Index].vs2 < end.S
def vs3Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].vs3 >= start.S & summon[Index].vs3 < end.S
def wdRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].wd >= start.S & summon[Index].wd < end.S
def zimmRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].zimm >= start.S & summon[Index].zimm < end.S
def zimm10Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].zimm10 >= start.S & summon[Index].zimm10 < end.S
def zimm11Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].zimm11 >= start.S & summon[Index].zimm11 < end.S
def zimm5Range(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].zimm5 >= start.S & summon[Index].zimm5 < end.S
def zimm6hiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].zimm6hi >= start.S & summon[Index].zimm6hi < end.S
def zimm6loRange(start: Int, end: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].zimm6lo >= start.S & summon[Index].zimm6lo < end.S

def hasAmoop()(using Arena, Context, Block, Index): Ref[Bool] = amoopRange(0, 32)
def hasAq()(using Arena, Context, Block, Index): Ref[Bool] = aqRange(0, 2)
def hasAqrl()(using Arena, Context, Block, Index): Ref[Bool] = aqrlRange(0, 4)
def hasBimm12hi()(using Arena, Context, Block, Index): Ref[Bool] = bimm12hiRange(0, 128)
def hasBimm12lo()(using Arena, Context, Block, Index): Ref[Bool] = bimm12loRange(0, 32)
def hasBs()(using Arena, Context, Block, Index): Ref[Bool] = bsRange(0, 4)
def hasCBimm9hi()(using Arena, Context, Block, Index): Ref[Bool] = cBimm9hiRange(0, 8)
def hasCBimm9lo()(using Arena, Context, Block, Index): Ref[Bool] = cBimm9loRange(0, 32)
def hasCImm12()(using Arena, Context, Block, Index): Ref[Bool] = cImm12Range(0, 2048)
def hasCImm6hi()(using Arena, Context, Block, Index): Ref[Bool] = cImm6hiRange(0, 2)
def hasCImm6lo()(using Arena, Context, Block, Index): Ref[Bool] = cImm6loRange(0, 32)
def hasCIndex()(using Arena, Context, Block, Index): Ref[Bool] = cIndexRange(0, 256)
def hasCNzimm10hi()(using Arena, Context, Block, Index): Ref[Bool] = cNzimm10hiRange(0, 2)
def hasCNzimm10lo()(using Arena, Context, Block, Index): Ref[Bool] = cNzimm10loRange(0, 32)
def hasCNzimm18hi()(using Arena, Context, Block, Index): Ref[Bool] = cNzimm18hiRange(0, 2)
def hasCNzimm18lo()(using Arena, Context, Block, Index): Ref[Bool] = cNzimm18loRange(0, 32)
def hasCNzimm6hi()(using Arena, Context, Block, Index): Ref[Bool] = cNzimm6hiRange(0, 2)
def hasCNzimm6lo()(using Arena, Context, Block, Index): Ref[Bool] = cNzimm6loRange(0, 32)
def hasCNzuimm10()(using Arena, Context, Block, Index): Ref[Bool] = cNzuimm10Range(0, 256)
def hasCNzuimm5()(using Arena, Context, Block, Index): Ref[Bool] = cNzuimm5Range(0, 32)
def hasCNzuimm6hi()(using Arena, Context, Block, Index): Ref[Bool] = cNzuimm6hiRange(0, 2)
def hasCNzuimm6lo()(using Arena, Context, Block, Index): Ref[Bool] = cNzuimm6loRange(0, 32)
def hasCRlist()(using Arena, Context, Block, Index): Ref[Bool] = cRlistRange(0, 16)
def hasCRs1N0()(using Arena, Context, Block, Index): Ref[Bool] = cRs1N0Range(0, 32)
def hasCRs2()(using Arena, Context, Block, Index): Ref[Bool] = cRs2Range(0, 32)
def hasCRs2N0()(using Arena, Context, Block, Index): Ref[Bool] = cRs2N0Range(0, 32)
def hasCSpimm()(using Arena, Context, Block, Index): Ref[Bool] = cSpimmRange(0, 4)
def hasCSreg1()(using Arena, Context, Block, Index): Ref[Bool] = cSreg1Range(0, 8)
def hasCSreg2()(using Arena, Context, Block, Index): Ref[Bool] = cSreg2Range(0, 8)
def hasCUimm1()(using Arena, Context, Block, Index): Ref[Bool] = cUimm1Range(0, 2)
def hasCUimm10spS()(using Arena, Context, Block, Index): Ref[Bool] = cUimm10spSRange(0, 64)
def hasCUimm10sphi()(using Arena, Context, Block, Index): Ref[Bool] = cUimm10sphiRange(0, 2)
def hasCUimm10splo()(using Arena, Context, Block, Index): Ref[Bool] = cUimm10sploRange(0, 32)
def hasCUimm2()(using Arena, Context, Block, Index): Ref[Bool] = cUimm2Range(0, 4)
def hasCUimm7hi()(using Arena, Context, Block, Index): Ref[Bool] = cUimm7hiRange(0, 8)
def hasCUimm7lo()(using Arena, Context, Block, Index): Ref[Bool] = cUimm7loRange(0, 4)
def hasCUimm8hi()(using Arena, Context, Block, Index): Ref[Bool] = cUimm8hiRange(0, 8)
def hasCUimm8lo()(using Arena, Context, Block, Index): Ref[Bool] = cUimm8loRange(0, 4)
def hasCUimm8spS()(using Arena, Context, Block, Index): Ref[Bool] = cUimm8spSRange(0, 64)
def hasCUimm8sphi()(using Arena, Context, Block, Index): Ref[Bool] = cUimm8sphiRange(0, 2)
def hasCUimm8splo()(using Arena, Context, Block, Index): Ref[Bool] = cUimm8sploRange(0, 32)
def hasCUimm9hi()(using Arena, Context, Block, Index): Ref[Bool] = cUimm9hiRange(0, 8)
def hasCUimm9lo()(using Arena, Context, Block, Index): Ref[Bool] = cUimm9loRange(0, 4)
def hasCUimm9spS()(using Arena, Context, Block, Index): Ref[Bool] = cUimm9spSRange(0, 64)
def hasCUimm9sphi()(using Arena, Context, Block, Index): Ref[Bool] = cUimm9sphiRange(0, 2)
def hasCUimm9splo()(using Arena, Context, Block, Index): Ref[Bool] = cUimm9sploRange(0, 32)
def hasCsr()(using Arena, Context, Block, Index): Ref[Bool] = csrRange(0, 4096)
def hasFm()(using Arena, Context, Block, Index): Ref[Bool] = fmRange(0, 16)
def hasFunct2()(using Arena, Context, Block, Index): Ref[Bool] = funct2Range(0, 4)
def hasFunct3()(using Arena, Context, Block, Index): Ref[Bool] = funct3Range(0, 8)
def hasFunct7()(using Arena, Context, Block, Index): Ref[Bool] = funct7Range(0, 128)
def hasImm12()(using Arena, Context, Block, Index): Ref[Bool] = imm12Range(0, 4096)
def hasImm12hi()(using Arena, Context, Block, Index): Ref[Bool] = imm12hiRange(0, 128)
def hasImm12lo()(using Arena, Context, Block, Index): Ref[Bool] = imm12loRange(0, 32)
def hasImm2()(using Arena, Context, Block, Index): Ref[Bool] = imm2Range(0, 4)
def hasImm20()(using Arena, Context, Block, Index): Ref[Bool] = imm20Range(0, 1048576)
def hasImm3()(using Arena, Context, Block, Index): Ref[Bool] = imm3Range(0, 8)
def hasImm4()(using Arena, Context, Block, Index): Ref[Bool] = imm4Range(0, 16)
def hasImm5()(using Arena, Context, Block, Index): Ref[Bool] = imm5Range(0, 32)
def hasImm6()(using Arena, Context, Block, Index): Ref[Bool] = imm6Range(0, 64)
def hasJimm20()(using Arena, Context, Block, Index): Ref[Bool] = jimm20Range(0, 1048576)
def hasNf()(using Arena, Context, Block, Index): Ref[Bool] = nfRange(0, 8)
def hasOpcode()(using Arena, Context, Block, Index): Ref[Bool] = opcodeRange(0, 128)
def hasPred()(using Arena, Context, Block, Index): Ref[Bool] = predRange(0, 16)
def hasRc()(using Arena, Context, Block, Index): Ref[Bool] = rcRange(0, 32)
def hasRd()(using Arena, Context, Block, Index): Ref[Bool] = rdRange(0, 32)
def hasRdN0()(using Arena, Context, Block, Index): Ref[Bool] = rdN0Range(0, 32)
def hasRdN2()(using Arena, Context, Block, Index): Ref[Bool] = rdN2Range(0, 32)
def hasRdP()(using Arena, Context, Block, Index): Ref[Bool] = rdPRange(0, 8)
def hasRdRs1()(using Arena, Context, Block, Index): Ref[Bool] = rdRs1Range(0, 32)
def hasRdRs1N0()(using Arena, Context, Block, Index): Ref[Bool] = rdRs1N0Range(0, 32)
def hasRdRs1P()(using Arena, Context, Block, Index): Ref[Bool] = rdRs1PRange(0, 8)
def hasRl()(using Arena, Context, Block, Index): Ref[Bool] = rlRange(0, 2)
def hasRm()(using Arena, Context, Block, Index): Ref[Bool] = rmRange(0, 8)
def hasRnum()(using Arena, Context, Block, Index): Ref[Bool] = rnumRange(0, 16)
def hasRs1()(using Arena, Context, Block, Index): Ref[Bool] = rs1Range(0, 32)
def hasRs1N0()(using Arena, Context, Block, Index): Ref[Bool] = rs1N0Range(0, 32)
def hasRs1P()(using Arena, Context, Block, Index): Ref[Bool] = rs1PRange(0, 8)
def hasRs2()(using Arena, Context, Block, Index): Ref[Bool] = rs2Range(0, 32)
def hasRs2P()(using Arena, Context, Block, Index): Ref[Bool] = rs2PRange(0, 8)
def hasRs3()(using Arena, Context, Block, Index): Ref[Bool] = rs3Range(0, 32)
def hasRt()(using Arena, Context, Block, Index): Ref[Bool] = rtRange(0, 32)
def hasShamtd()(using Arena, Context, Block, Index): Ref[Bool] = shamtdRange(0, 64)
def hasShamtq()(using Arena, Context, Block, Index): Ref[Bool] = shamtqRange(0, 128)
def hasShamtw()(using Arena, Context, Block, Index): Ref[Bool] = shamtwRange(0, 32)
def hasShamtw4()(using Arena, Context, Block, Index): Ref[Bool] = shamtw4Range(0, 16)
def hasSimm5()(using Arena, Context, Block, Index): Ref[Bool] = simm5Range(0, 32)
def hasSucc()(using Arena, Context, Block, Index): Ref[Bool] = succRange(0, 16)
def hasVd()(using Arena, Context, Block, Index): Ref[Bool] = vdRange(0, 32)
def hasVm()(using Arena, Context, Block, Index): Ref[Bool] = vmRange(0, 2)
def hasVs1()(using Arena, Context, Block, Index): Ref[Bool] = vs1Range(0, 32)
def hasVs2()(using Arena, Context, Block, Index): Ref[Bool] = vs2Range(0, 32)
def hasVs3()(using Arena, Context, Block, Index): Ref[Bool] = vs3Range(0, 32)
def hasWd()(using Arena, Context, Block, Index): Ref[Bool] = wdRange(0, 2)
def hasZimm()(using Arena, Context, Block, Index): Ref[Bool] = zimmRange(0, 32)
def hasZimm10()(using Arena, Context, Block, Index): Ref[Bool] = zimm10Range(0, 1024)
def hasZimm11()(using Arena, Context, Block, Index): Ref[Bool] = zimm11Range(0, 2048)
def hasZimm5()(using Arena, Context, Block, Index): Ref[Bool] = zimm5Range(0, 32)
def hasZimm6hi()(using Arena, Context, Block, Index): Ref[Bool] = zimm6hiRange(0, 2)
def hasZimm6lo()(using Arena, Context, Block, Index): Ref[Bool] = zimm6loRange(0, 32)

def nameId(idx: Int)(using Arena, Context, Block, Index): Ref[Bool] = summon[Index].nameId === idx.S
def isRV32C()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv32_c
def isRV32CF()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv32_c_f
def isRV32DZFA()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv32_d_zfa
def isRV32I()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv32_i
def isRV32ZBB()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv32_zbb
def isRV32ZBKB()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv32_zbkb
def isRV32ZBS()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv32_zbs
def isRV32ZICNTR()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv32_zicntr
def isRV32ZK()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv32_zk
def isRV32ZKN()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv32_zkn
def isRV32ZKND()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv32_zknd
def isRV32ZKNE()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv32_zkne
def isRV32ZKNH()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv32_zknh
def isRV32ZKS()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv32_zks
def isRV64A()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv64_a
def isRV64C()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv64_c
def isRV64D()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv64_d
def isRV64F()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv64_f
def isRV64H()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv64_h
def isRV64I()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv64_i
def isRV64M()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv64_m
def isRV64Q()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv64_q
def isRV64QZFA()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv64_q_zfa
def isRV64ZACAS()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv64_zacas
def isRV64ZBA()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv64_zba
def isRV64ZBB()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv64_zbb
def isRV64ZBKB()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv64_zbkb
def isRV64ZBP()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv64_zbp
def isRV64ZBS()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv64_zbs
def isRV64ZCB()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv64_zcb
def isRV64ZFH()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv64_zfh
def isRV64ZK()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv64_zk
def isRV64ZKN()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv64_zkn
def isRV64ZKND()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv64_zknd
def isRV64ZKNE()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv64_zkne
def isRV64ZKNH()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv64_zknh
def isRV64ZKS()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv64_zks
def isRVA()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_a
def isRVC()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_c
def isRVCD()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_c_d
def isRVCZICFISS()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_c_zicfiss
def isRVCZIHINTNTL()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_c_zihintntl
def isRVD()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_d
def isRVDZFA()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_d_zfa
def isRVDZFH()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_d_zfh
def isRVF()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_f
def isRVFZFA()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_f_zfa
def isRVH()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_h
def isRVI()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_i
def isRVM()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_m
def isRVQ()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_q
def isRVQZFA()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_q_zfa
def isRVQZFH()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_q_zfh
def isRVS()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_s
def isRVSDEXT()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_sdext
def isRVSMDBLTRP()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_smdbltrp
def isRVSMRNMI()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_smrnmi
def isRVSVINVAL()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_svinval
def isRVSYSTEM()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_system
def isRVV()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_v
def isRVVALIASES()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_v_aliases
def isRVZABHA()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zabha
def isRVZACAS()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zacas
def isRVZALASR()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zalasr
def isRVZAWRS()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zawrs
def isRVZBA()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zba
def isRVZBB()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zbb
def isRVZBC()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zbc
def isRVZBKB()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zbkb
def isRVZBKC()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zbkc
def isRVZBKX()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zbkx
def isRVZBP()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zbp
def isRVZBS()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zbs
def isRVZCB()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zcb
def isRVZCMOP()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zcmop
def isRVZCMP()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zcmp
def isRVZCMT()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zcmt
def isRVZFBFMIN()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zfbfmin
def isRVZFH()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zfh
def isRVZFHZFA()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zfh_zfa
def isRVZICBO()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zicbo
def isRVZICFILP()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zicfilp
def isRVZICFISS()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zicfiss
def isRVZICNTR()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zicntr
def isRVZICOND()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zicond
def isRVZICSR()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zicsr
def isRVZIFENCEI()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zifencei
def isRVZIHINTNTL()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zihintntl
def isRVZIMOP()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zimop
def isRVZK()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zk
def isRVZKN()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zkn
def isRVZKNH()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zknh
def isRVZKS()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zks
def isRVZKSED()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zksed
def isRVZKSH()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zksh
def isRVZVBB()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zvbb
def isRVZVBC()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zvbc
def isRVZVFBFMIN()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zvfbfmin
def isRVZVFBFWMA()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zvfbfwma
def isRVZVKG()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zvkg
def isRVZVKN()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zvkn
def isRVZVKNED()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zvkned
def isRVZVKNHA()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zvknha
def isRVZVKNHB()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zvknhb
def isRVZVKS()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zvks
def isRVZVKSED()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zvksed
def isRVZVKSH()(using Arena, Context, Block, Recipe): Ref[Bool] = summon[Recipe].rv_zvksh
def isCJal()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(0) & hasCImm12() & isRV32C()
def isCFlw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(1) & hasRdP() & hasCUimm7lo() & hasRs1P() & hasCUimm7hi() & isRV32CF()
def isCFlwsp()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(2) & hasCUimm8splo() & hasRd() & hasCUimm8sphi() & isRV32CF()
def isCFsw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(3) & hasRs2P() & hasCUimm7lo() & hasRs1P() & hasCUimm7hi() & isRV32CF()
def isCFswsp()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(4) & hasCRs2() & hasCUimm8spS() & isRV32CF()
def isFmvhXD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(5) & hasRd() & hasRs1() & isRV32DZFA()
def isFmvpDX()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(6) & hasRd() & hasRs1() & hasRs2() & isRV32DZFA()
def isSlliRV32I()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(7) & hasRd() & hasRs1() & hasShamtw() & isRV32I()
def isSraiRV32I()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(8) & hasRd() & hasRs1() & hasShamtw() & isRV32I()
def isSrliRV32I()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(9) & hasRd() & hasRs1() & hasShamtw() & isRV32I()
def isAes32dsi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(10) & hasRd() & hasRs1() & hasRs2() & hasBs() & (isRV32ZKND() | isRV32ZK() | isRV32ZKN())
def isAes32dsmi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(11) & hasRd() & hasRs1() & hasRs2() & hasBs() & (isRV32ZKND() | isRV32ZK() | isRV32ZKN())
def isAes32esi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(12) & hasRd() & hasRs1() & hasRs2() & hasBs() & (isRV32ZKNE() | isRV32ZK() | isRV32ZKN())
def isAes32esmi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(13) & hasRd() & hasRs1() & hasRs2() & hasBs() & (isRV32ZKNE() | isRV32ZK() | isRV32ZKN())
def isSha512sig0h()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(14) & hasRd() & hasRs1() & hasRs2() & (isRV32ZKNH() | isRV32ZK() | isRV32ZKN())
def isSha512sig0l()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(15) & hasRd() & hasRs1() & hasRs2() & (isRV32ZKNH() | isRV32ZK() | isRV32ZKN())
def isSha512sig1h()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(16) & hasRd() & hasRs1() & hasRs2() & (isRV32ZKNH() | isRV32ZK() | isRV32ZKN())
def isSha512sig1l()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(17) & hasRd() & hasRs1() & hasRs2() & (isRV32ZKNH() | isRV32ZK() | isRV32ZKN())
def isSha512sum0r()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(18) & hasRd() & hasRs1() & hasRs2() & (isRV32ZKNH() | isRV32ZK() | isRV32ZKN())
def isSha512sum1r()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(19) & hasRd() & hasRs1() & hasRs2() & (isRV32ZKNH() | isRV32ZK() | isRV32ZKN())
def isAmoaddD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(20) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRV64A()
def isAmoandD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(21) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRV64A()
def isAmomaxD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(22) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRV64A()
def isAmomaxuD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(23) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRV64A()
def isAmominD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(24) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRV64A()
def isAmominuD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(25) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRV64A()
def isAmoorD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(26) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRV64A()
def isAmoswapD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(27) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRV64A()
def isAmoxorD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(28) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRV64A()
def isLrD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(29) & hasRd() & hasRs1() & hasRl() & hasAq() & isRV64A()
def isScD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(30) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRV64A()
def isCAddiw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(31) & hasCImm6lo() & hasRdRs1N0() & hasCImm6hi() & isRV64C()
def isCAddw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(32) & hasRs2P() & hasRdRs1P() & isRV64C()
def isCLd()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(33) & hasRdP() & hasCUimm8lo() & hasRs1P() & hasCUimm8hi() & isRV64C()
def isCLdsp()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(34) & hasCUimm9splo() & hasRdN0() & hasCUimm9sphi() & isRV64C()
def isCSd()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(35) & hasRs2P() & hasCUimm8lo() & hasRs1P() & hasCUimm8hi() & isRV64C()
def isCSdsp()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(36) & hasCRs2() & hasCUimm9spS() & isRV64C()
def isCSlli()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(37) & hasCNzuimm6lo() & hasRdRs1N0() & hasCNzuimm6hi() & isRV64C()
def isCSrai()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(38) & hasCNzuimm6lo() & hasRdRs1P() & hasCNzuimm6hi() & isRV64C()
def isCSrli()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(39) & hasCNzuimm6lo() & hasRdRs1P() & hasCNzuimm6hi() & isRV64C()
def isCSubw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(40) & hasRs2P() & hasRdRs1P() & isRV64C()
def isFcvtDL()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(41) & hasRd() & hasRm() & hasRs1() & isRV64D()
def isFcvtDLu()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(42) & hasRd() & hasRm() & hasRs1() & isRV64D()
def isFcvtLD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(43) & hasRd() & hasRm() & hasRs1() & isRV64D()
def isFcvtLuD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(44) & hasRd() & hasRm() & hasRs1() & isRV64D()
def isFmvDX()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(45) & hasRd() & hasRs1() & isRV64D()
def isFmvXD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(46) & hasRd() & hasRs1() & isRV64D()
def isFcvtLS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(47) & hasRd() & hasRm() & hasRs1() & isRV64F()
def isFcvtLuS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(48) & hasRd() & hasRm() & hasRs1() & isRV64F()
def isFcvtSL()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(49) & hasRd() & hasRm() & hasRs1() & isRV64F()
def isFcvtSLu()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(50) & hasRd() & hasRm() & hasRs1() & isRV64F()
def isHlvD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(51) & hasRd() & hasRs1() & isRV64H()
def isHlvWu()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(52) & hasRd() & hasRs1() & isRV64H()
def isHsvD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(53) & hasRs1() & hasRs2() & isRV64H()
def isAddiw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(54) & hasRd() & hasRs1() & hasImm12() & isRV64I()
def isAddw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(55) & hasRd() & hasRs1() & hasRs2() & isRV64I()
def isLd()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(56) & hasRd() & hasRs1() & hasImm12() & isRV64I()
def isLwu()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(57) & hasRd() & hasRs1() & hasImm12() & isRV64I()
def isSd()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(58) & hasImm12lo() & hasRs1() & hasRs2() & hasImm12hi() & isRV64I()
def isSlliRV64I()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(59) & hasRd() & hasRs1() & hasShamtd() & isRV64I()
def isSlliw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(60) & hasRd() & hasRs1() & hasShamtw() & isRV64I()
def isSllw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(61) & hasRd() & hasRs1() & hasRs2() & isRV64I()
def isSraiRV64I()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(62) & hasRd() & hasRs1() & hasShamtd() & isRV64I()
def isSraiw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(63) & hasRd() & hasRs1() & hasShamtw() & isRV64I()
def isSraw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(64) & hasRd() & hasRs1() & hasRs2() & isRV64I()
def isSrliRV64I()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(65) & hasRd() & hasRs1() & hasShamtd() & isRV64I()
def isSrliw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(66) & hasRd() & hasRs1() & hasShamtw() & isRV64I()
def isSrlw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(67) & hasRd() & hasRs1() & hasRs2() & isRV64I()
def isSubw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(68) & hasRd() & hasRs1() & hasRs2() & isRV64I()
def isDivuw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(69) & hasRd() & hasRs1() & hasRs2() & isRV64M()
def isDivw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(70) & hasRd() & hasRs1() & hasRs2() & isRV64M()
def isMulw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(71) & hasRd() & hasRs1() & hasRs2() & isRV64M()
def isRemuw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(72) & hasRd() & hasRs1() & hasRs2() & isRV64M()
def isRemw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(73) & hasRd() & hasRs1() & hasRs2() & isRV64M()
def isFcvtLQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(74) & hasRd() & hasRm() & hasRs1() & isRV64Q()
def isFcvtLuQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(75) & hasRd() & hasRm() & hasRs1() & isRV64Q()
def isFcvtQL()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(76) & hasRd() & hasRm() & hasRs1() & isRV64Q()
def isFcvtQLu()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(77) & hasRd() & hasRm() & hasRs1() & isRV64Q()
def isFmvhXQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(78) & hasRd() & hasRs1() & isRV64QZFA()
def isFmvpQX()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(79) & hasRd() & hasRs1() & hasRs2() & isRV64QZFA()
def isAmocasQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(80) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRV64ZACAS()
def isAddUw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(81) & hasRd() & hasRs1() & hasRs2() & isRV64ZBA()
def isSh1addUw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(82) & hasRd() & hasRs1() & hasRs2() & isRV64ZBA()
def isSh2addUw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(83) & hasRd() & hasRs1() & hasRs2() & isRV64ZBA()
def isSh3addUw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(84) & hasRd() & hasRs1() & hasRs2() & isRV64ZBA()
def isSlliUw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(85) & hasRd() & hasRs1() & hasShamtd() & isRV64ZBA()
def isClzw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(86) & hasRd() & hasRs1() & isRV64ZBB()
def isCpopw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(87) & hasRd() & hasRs1() & isRV64ZBB()
def isCtzw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(88) & hasRd() & hasRs1() & isRV64ZBB()
def isRolw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(89) & hasRd() & hasRs1() & hasRs2() & (isRV64ZBB() | isRV64ZBKB() | isRV64ZK() | isRV64ZKN() | isRV64ZKS())
def isRori()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(90) & hasRd() & hasRs1() & hasShamtd() & (isRV64ZBB() | isRV64ZBKB() | isRV64ZK() | isRV64ZKN() | isRV64ZKS())
def isRoriw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(91) & hasRd() & hasRs1() & hasShamtw() & (isRV64ZBB() | isRV64ZBKB() | isRV64ZK() | isRV64ZKN() | isRV64ZKS())
def isRorw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(92) & hasRd() & hasRs1() & hasRs2() & (isRV64ZBB() | isRV64ZBKB() | isRV64ZK() | isRV64ZKN() | isRV64ZKS())
def isPackw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(93) & hasRd() & hasRs1() & hasRs2() & (isRV64ZBKB() | isRV64ZK() | isRV64ZKN() | isRV64ZKS())
def isGorci()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(94) & hasRd() & hasRs1() & hasShamtd() & isRV64ZBP()
def isGrevi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(95) & hasRd() & hasRs1() & hasShamtd() & isRV64ZBP()
def isShfli()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(96) & hasRd() & hasRs1() & hasShamtw() & isRV64ZBP()
def isUnshfli()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(97) & hasRd() & hasRs1() & hasShamtw() & isRV64ZBP()
def isXperm32()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(98) & hasRd() & hasRs1() & hasRs2() & isRV64ZBP()
def isBclri()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(99) & hasRd() & hasRs1() & hasShamtd() & isRV64ZBS()
def isBexti()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(100) & hasRd() & hasRs1() & hasShamtd() & isRV64ZBS()
def isBinvi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(101) & hasRd() & hasRs1() & hasShamtd() & isRV64ZBS()
def isBseti()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(102) & hasRd() & hasRs1() & hasShamtd() & isRV64ZBS()
def isCZextW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(103) & hasRdRs1P() & isRV64ZCB()
def isFcvtHL()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(104) & hasRd() & hasRm() & hasRs1() & isRV64ZFH()
def isFcvtHLu()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(105) & hasRd() & hasRm() & hasRs1() & isRV64ZFH()
def isFcvtLH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(106) & hasRd() & hasRm() & hasRs1() & isRV64ZFH()
def isFcvtLuH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(107) & hasRd() & hasRm() & hasRs1() & isRV64ZFH()
def isAes64ds()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(108) & hasRd() & hasRs1() & hasRs2() & (isRV64ZKND() | isRV64ZK() | isRV64ZKN())
def isAes64dsm()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(109) & hasRd() & hasRs1() & hasRs2() & (isRV64ZKND() | isRV64ZK() | isRV64ZKN())
def isAes64im()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(110) & hasRd() & hasRs1() & (isRV64ZKND() | isRV64ZK() | isRV64ZKN())
def isAes64ks1i()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(111) & hasRd() & hasRs1() & hasRnum() & (isRV64ZKND() | isRV64ZK() | isRV64ZKN() | isRV64ZKNE())
def isAes64ks2()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(112) & hasRd() & hasRs1() & hasRs2() & (isRV64ZKND() | isRV64ZK() | isRV64ZKN() | isRV64ZKNE())
def isAes64es()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(113) & hasRd() & hasRs1() & hasRs2() & (isRV64ZKNE() | isRV64ZK() | isRV64ZKN())
def isAes64esm()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(114) & hasRd() & hasRs1() & hasRs2() & (isRV64ZKNE() | isRV64ZK() | isRV64ZKN())
def isSha512sig0()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(115) & hasRd() & hasRs1() & (isRV64ZKNH() | isRV64ZK() | isRV64ZKN())
def isSha512sig1()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(116) & hasRd() & hasRs1() & (isRV64ZKNH() | isRV64ZK() | isRV64ZKN())
def isSha512sum0()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(117) & hasRd() & hasRs1() & (isRV64ZKNH() | isRV64ZK() | isRV64ZKN())
def isSha512sum1()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(118) & hasRd() & hasRs1() & (isRV64ZKNH() | isRV64ZK() | isRV64ZKN())
def isAmoaddW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(119) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVA()
def isAmoandW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(120) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVA()
def isAmomaxW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(121) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVA()
def isAmomaxuW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(122) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVA()
def isAmominW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(123) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVA()
def isAmominuW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(124) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVA()
def isAmoorW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(125) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVA()
def isAmoswapW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(126) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVA()
def isAmoxorW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(127) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVA()
def isLrW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(128) & hasRd() & hasRs1() & hasRl() & hasAq() & isRVA()
def isScW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(129) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVA()
def isCAdd()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(130) & hasCRs2N0() & hasRdRs1N0() & isRVC()
def isCAddi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(131) & hasCNzimm6lo() & hasRdRs1N0() & hasCNzimm6hi() & isRVC()
def isCAddi16sp()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(132) & hasCNzimm10lo() & hasCNzimm10hi() & isRVC()
def isCAddi4spn()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(133) & hasRdP() & hasCNzuimm10() & isRVC()
def isCAnd()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(134) & hasRs2P() & hasRdRs1P() & isRVC()
def isCAndi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(135) & hasCImm6lo() & hasRdRs1P() & hasCImm6hi() & isRVC()
def isCBeqz()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(136) & hasCBimm9lo() & hasRs1P() & hasCBimm9hi() & isRVC()
def isCBnez()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(137) & hasCBimm9lo() & hasRs1P() & hasCBimm9hi() & isRVC()
def isCEbreak()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(138) & isRVC()
def isCJ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(139) & hasCImm12() & isRVC()
def isCJalr()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(140) & hasCRs1N0() & isRVC()
def isCJr()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(141) & hasRs1N0() & isRVC()
def isCLi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(142) & hasCImm6lo() & hasRdN0() & hasCImm6hi() & isRVC()
def isCLui()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(143) & hasCNzimm18lo() & hasRdN2() & hasCNzimm18hi() & isRVC()
def isCLw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(144) & hasRdP() & hasCUimm7lo() & hasRs1P() & hasCUimm7hi() & isRVC()
def isCLwsp()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(145) & hasCUimm8splo() & hasRdN0() & hasCUimm8sphi() & isRVC()
def isCMv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(146) & hasCRs2N0() & hasRdN0() & isRVC()
def isCNop()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(147) & hasCNzimm6lo() & hasCNzimm6hi() & isRVC()
def isCOr()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(148) & hasRs2P() & hasRdRs1P() & isRVC()
def isCSub()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(149) & hasRs2P() & hasRdRs1P() & isRVC()
def isCSw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(150) & hasRs2P() & hasCUimm7lo() & hasRs1P() & hasCUimm7hi() & isRVC()
def isCSwsp()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(151) & hasCRs2() & hasCUimm8spS() & isRVC()
def isCXor()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(152) & hasRs2P() & hasRdRs1P() & isRVC()
def isCFld()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(153) & hasRdP() & hasCUimm8lo() & hasRs1P() & hasCUimm8hi() & isRVCD()
def isCFldsp()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(154) & hasCUimm9splo() & hasRd() & hasCUimm9sphi() & isRVCD()
def isCFsd()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(155) & hasRs2P() & hasCUimm8lo() & hasRs1P() & hasCUimm8hi() & isRVCD()
def isCFsdsp()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(156) & hasCRs2() & hasCUimm9spS() & isRVCD()
def isFaddD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(157) & hasRd() & hasRm() & hasRs1() & hasRs2() & isRVD()
def isFclassD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(158) & hasRd() & hasRs1() & isRVD()
def isFcvtDS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(159) & hasRd() & hasRm() & hasRs1() & isRVD()
def isFcvtDW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(160) & hasRd() & hasRm() & hasRs1() & isRVD()
def isFcvtDWu()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(161) & hasRd() & hasRm() & hasRs1() & isRVD()
def isFcvtSD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(162) & hasRd() & hasRm() & hasRs1() & isRVD()
def isFcvtWD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(163) & hasRd() & hasRm() & hasRs1() & isRVD()
def isFcvtWuD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(164) & hasRd() & hasRm() & hasRs1() & isRVD()
def isFdivD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(165) & hasRd() & hasRm() & hasRs1() & hasRs2() & isRVD()
def isFeqD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(166) & hasRd() & hasRs1() & hasRs2() & isRVD()
def isFld()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(167) & hasRd() & hasRs1() & hasImm12() & isRVD()
def isFleD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(168) & hasRd() & hasRs1() & hasRs2() & isRVD()
def isFltD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(169) & hasRd() & hasRs1() & hasRs2() & isRVD()
def isFmaddD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(170) & hasRd() & hasRm() & hasRs1() & hasRs2() & hasRs3() & isRVD()
def isFmaxD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(171) & hasRd() & hasRs1() & hasRs2() & isRVD()
def isFminD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(172) & hasRd() & hasRs1() & hasRs2() & isRVD()
def isFmsubD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(173) & hasRd() & hasRm() & hasRs1() & hasRs2() & hasRs3() & isRVD()
def isFmulD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(174) & hasRd() & hasRm() & hasRs1() & hasRs2() & isRVD()
def isFnmaddD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(175) & hasRd() & hasRm() & hasRs1() & hasRs2() & hasRs3() & isRVD()
def isFnmsubD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(176) & hasRd() & hasRm() & hasRs1() & hasRs2() & hasRs3() & isRVD()
def isFsd()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(177) & hasImm12lo() & hasRs1() & hasRs2() & hasImm12hi() & isRVD()
def isFsgnjD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(178) & hasRd() & hasRs1() & hasRs2() & isRVD()
def isFsgnjnD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(179) & hasRd() & hasRs1() & hasRs2() & isRVD()
def isFsgnjxD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(180) & hasRd() & hasRs1() & hasRs2() & isRVD()
def isFsqrtD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(181) & hasRd() & hasRm() & hasRs1() & isRVD()
def isFsubD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(182) & hasRd() & hasRm() & hasRs1() & hasRs2() & isRVD()
def isFcvtmodWD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(183) & hasRd() & hasRs1() & isRVDZFA()
def isFleqD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(184) & hasRd() & hasRs1() & hasRs2() & isRVDZFA()
def isFliD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(185) & hasRd() & hasRs1() & isRVDZFA()
def isFltqD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(186) & hasRd() & hasRs1() & hasRs2() & isRVDZFA()
def isFmaxmD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(187) & hasRd() & hasRs1() & hasRs2() & isRVDZFA()
def isFminmD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(188) & hasRd() & hasRs1() & hasRs2() & isRVDZFA()
def isFroundD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(189) & hasRd() & hasRm() & hasRs1() & isRVDZFA()
def isFroundnxD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(190) & hasRd() & hasRm() & hasRs1() & isRVDZFA()
def isFcvtDH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(191) & hasRd() & hasRm() & hasRs1() & isRVDZFH()
def isFcvtHD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(192) & hasRd() & hasRm() & hasRs1() & isRVDZFH()
def isFaddS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(193) & hasRd() & hasRm() & hasRs1() & hasRs2() & isRVF()
def isFclassS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(194) & hasRd() & hasRs1() & isRVF()
def isFcvtSW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(195) & hasRd() & hasRm() & hasRs1() & isRVF()
def isFcvtSWu()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(196) & hasRd() & hasRm() & hasRs1() & isRVF()
def isFcvtWS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(197) & hasRd() & hasRm() & hasRs1() & isRVF()
def isFcvtWuS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(198) & hasRd() & hasRm() & hasRs1() & isRVF()
def isFdivS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(199) & hasRd() & hasRm() & hasRs1() & hasRs2() & isRVF()
def isFeqS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(200) & hasRd() & hasRs1() & hasRs2() & isRVF()
def isFleS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(201) & hasRd() & hasRs1() & hasRs2() & isRVF()
def isFltS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(202) & hasRd() & hasRs1() & hasRs2() & isRVF()
def isFlw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(203) & hasRd() & hasRs1() & hasImm12() & isRVF()
def isFmaddS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(204) & hasRd() & hasRm() & hasRs1() & hasRs2() & hasRs3() & isRVF()
def isFmaxS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(205) & hasRd() & hasRs1() & hasRs2() & isRVF()
def isFminS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(206) & hasRd() & hasRs1() & hasRs2() & isRVF()
def isFmsubS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(207) & hasRd() & hasRm() & hasRs1() & hasRs2() & hasRs3() & isRVF()
def isFmulS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(208) & hasRd() & hasRm() & hasRs1() & hasRs2() & isRVF()
def isFmvWX()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(209) & hasRd() & hasRs1() & isRVF()
def isFmvXW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(210) & hasRd() & hasRs1() & isRVF()
def isFnmaddS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(211) & hasRd() & hasRm() & hasRs1() & hasRs2() & hasRs3() & isRVF()
def isFnmsubS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(212) & hasRd() & hasRm() & hasRs1() & hasRs2() & hasRs3() & isRVF()
def isFsgnjS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(213) & hasRd() & hasRs1() & hasRs2() & isRVF()
def isFsgnjnS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(214) & hasRd() & hasRs1() & hasRs2() & isRVF()
def isFsgnjxS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(215) & hasRd() & hasRs1() & hasRs2() & isRVF()
def isFsqrtS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(216) & hasRd() & hasRm() & hasRs1() & isRVF()
def isFsubS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(217) & hasRd() & hasRm() & hasRs1() & hasRs2() & isRVF()
def isFsw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(218) & hasImm12lo() & hasRs1() & hasRs2() & hasImm12hi() & isRVF()
def isFleqS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(219) & hasRd() & hasRs1() & hasRs2() & isRVFZFA()
def isFliS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(220) & hasRd() & hasRs1() & isRVFZFA()
def isFltqS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(221) & hasRd() & hasRs1() & hasRs2() & isRVFZFA()
def isFmaxmS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(222) & hasRd() & hasRs1() & hasRs2() & isRVFZFA()
def isFminmS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(223) & hasRd() & hasRs1() & hasRs2() & isRVFZFA()
def isFroundS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(224) & hasRd() & hasRm() & hasRs1() & isRVFZFA()
def isFroundnxS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(225) & hasRd() & hasRm() & hasRs1() & isRVFZFA()
def isHfenceGvma()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(226) & hasRs1() & hasRs2() & isRVH()
def isHfenceVvma()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(227) & hasRs1() & hasRs2() & isRVH()
def isHlvB()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(228) & hasRd() & hasRs1() & isRVH()
def isHlvBu()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(229) & hasRd() & hasRs1() & isRVH()
def isHlvH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(230) & hasRd() & hasRs1() & isRVH()
def isHlvHu()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(231) & hasRd() & hasRs1() & isRVH()
def isHlvW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(232) & hasRd() & hasRs1() & isRVH()
def isHlvxHu()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(233) & hasRd() & hasRs1() & isRVH()
def isHlvxWu()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(234) & hasRd() & hasRs1() & isRVH()
def isHsvB()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(235) & hasRs1() & hasRs2() & isRVH()
def isHsvH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(236) & hasRs1() & hasRs2() & isRVH()
def isHsvW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(237) & hasRs1() & hasRs2() & isRVH()
def isAdd()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(238) & hasRd() & hasRs1() & hasRs2() & isRVI()
def isAddi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(239) & hasRd() & hasRs1() & hasImm12() & isRVI()
def isAnd()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(240) & hasRd() & hasRs1() & hasRs2() & isRVI()
def isAndi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(241) & hasRd() & hasRs1() & hasImm12() & isRVI()
def isAuipc()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(242) & hasRd() & hasImm20() & isRVI()
def isBeq()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(243) & hasBimm12lo() & hasRs1() & hasRs2() & hasBimm12hi() & isRVI()
def isBge()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(244) & hasBimm12lo() & hasRs1() & hasRs2() & hasBimm12hi() & isRVI()
def isBgeu()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(245) & hasBimm12lo() & hasRs1() & hasRs2() & hasBimm12hi() & isRVI()
def isBlt()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(246) & hasBimm12lo() & hasRs1() & hasRs2() & hasBimm12hi() & isRVI()
def isBltu()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(247) & hasBimm12lo() & hasRs1() & hasRs2() & hasBimm12hi() & isRVI()
def isBne()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(248) & hasBimm12lo() & hasRs1() & hasRs2() & hasBimm12hi() & isRVI()
def isEbreak()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(249) & isRVI()
def isEcall()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(250) & isRVI()
def isFence()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(251) & hasRd() & hasRs1() & hasSucc() & hasPred() & hasFm() & isRVI()
def isJal()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(252) & hasRd() & hasJimm20() & isRVI()
def isJalr()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(253) & hasRd() & hasRs1() & hasImm12() & isRVI()
def isLb()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(254) & hasRd() & hasRs1() & hasImm12() & isRVI()
def isLbu()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(255) & hasRd() & hasRs1() & hasImm12() & isRVI()
def isLh()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(256) & hasRd() & hasRs1() & hasImm12() & isRVI()
def isLhu()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(257) & hasRd() & hasRs1() & hasImm12() & isRVI()
def isLui()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(258) & hasRd() & hasImm20() & isRVI()
def isLw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(259) & hasRd() & hasRs1() & hasImm12() & isRVI()
def isOr()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(260) & hasRd() & hasRs1() & hasRs2() & isRVI()
def isOri()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(261) & hasRd() & hasRs1() & hasImm12() & isRVI()
def isSb()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(262) & hasImm12lo() & hasRs1() & hasRs2() & hasImm12hi() & isRVI()
def isSh()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(263) & hasImm12lo() & hasRs1() & hasRs2() & hasImm12hi() & isRVI()
def isSll()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(264) & hasRd() & hasRs1() & hasRs2() & isRVI()
def isSlt()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(265) & hasRd() & hasRs1() & hasRs2() & isRVI()
def isSlti()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(266) & hasRd() & hasRs1() & hasImm12() & isRVI()
def isSltiu()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(267) & hasRd() & hasRs1() & hasImm12() & isRVI()
def isSltu()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(268) & hasRd() & hasRs1() & hasRs2() & isRVI()
def isSra()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(269) & hasRd() & hasRs1() & hasRs2() & isRVI()
def isSrl()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(270) & hasRd() & hasRs1() & hasRs2() & isRVI()
def isSub()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(271) & hasRd() & hasRs1() & hasRs2() & isRVI()
def isSw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(272) & hasImm12lo() & hasRs1() & hasRs2() & hasImm12hi() & isRVI()
def isXor()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(273) & hasRd() & hasRs1() & hasRs2() & isRVI()
def isXori()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(274) & hasRd() & hasRs1() & hasImm12() & isRVI()
def isDiv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(275) & hasRd() & hasRs1() & hasRs2() & isRVM()
def isDivu()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(276) & hasRd() & hasRs1() & hasRs2() & isRVM()
def isMul()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(277) & hasRd() & hasRs1() & hasRs2() & isRVM()
def isMulh()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(278) & hasRd() & hasRs1() & hasRs2() & isRVM()
def isMulhsu()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(279) & hasRd() & hasRs1() & hasRs2() & isRVM()
def isMulhu()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(280) & hasRd() & hasRs1() & hasRs2() & isRVM()
def isRem()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(281) & hasRd() & hasRs1() & hasRs2() & isRVM()
def isRemu()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(282) & hasRd() & hasRs1() & hasRs2() & isRVM()
def isFaddQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(283) & hasRd() & hasRm() & hasRs1() & hasRs2() & isRVQ()
def isFclassQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(284) & hasRd() & hasRs1() & isRVQ()
def isFcvtDQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(285) & hasRd() & hasRm() & hasRs1() & isRVQ()
def isFcvtQD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(286) & hasRd() & hasRm() & hasRs1() & isRVQ()
def isFcvtQS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(287) & hasRd() & hasRm() & hasRs1() & isRVQ()
def isFcvtQW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(288) & hasRd() & hasRm() & hasRs1() & isRVQ()
def isFcvtQWu()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(289) & hasRd() & hasRm() & hasRs1() & isRVQ()
def isFcvtSQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(290) & hasRd() & hasRm() & hasRs1() & isRVQ()
def isFcvtWQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(291) & hasRd() & hasRm() & hasRs1() & isRVQ()
def isFcvtWuQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(292) & hasRd() & hasRm() & hasRs1() & isRVQ()
def isFdivQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(293) & hasRd() & hasRm() & hasRs1() & hasRs2() & isRVQ()
def isFeqQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(294) & hasRd() & hasRs1() & hasRs2() & isRVQ()
def isFleQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(295) & hasRd() & hasRs1() & hasRs2() & isRVQ()
def isFlq()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(296) & hasRd() & hasRs1() & hasImm12() & isRVQ()
def isFltQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(297) & hasRd() & hasRs1() & hasRs2() & isRVQ()
def isFmaddQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(298) & hasRd() & hasRm() & hasRs1() & hasRs2() & hasRs3() & isRVQ()
def isFmaxQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(299) & hasRd() & hasRs1() & hasRs2() & isRVQ()
def isFminQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(300) & hasRd() & hasRs1() & hasRs2() & isRVQ()
def isFmsubQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(301) & hasRd() & hasRm() & hasRs1() & hasRs2() & hasRs3() & isRVQ()
def isFmulQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(302) & hasRd() & hasRm() & hasRs1() & hasRs2() & isRVQ()
def isFnmaddQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(303) & hasRd() & hasRm() & hasRs1() & hasRs2() & hasRs3() & isRVQ()
def isFnmsubQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(304) & hasRd() & hasRm() & hasRs1() & hasRs2() & hasRs3() & isRVQ()
def isFsgnjQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(305) & hasRd() & hasRs1() & hasRs2() & isRVQ()
def isFsgnjnQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(306) & hasRd() & hasRs1() & hasRs2() & isRVQ()
def isFsgnjxQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(307) & hasRd() & hasRs1() & hasRs2() & isRVQ()
def isFsq()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(308) & hasImm12lo() & hasRs1() & hasRs2() & hasImm12hi() & isRVQ()
def isFsqrtQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(309) & hasRd() & hasRm() & hasRs1() & isRVQ()
def isFsubQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(310) & hasRd() & hasRm() & hasRs1() & hasRs2() & isRVQ()
def isFleqQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(311) & hasRd() & hasRs1() & hasRs2() & isRVQZFA()
def isFliQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(312) & hasRd() & hasRs1() & isRVQZFA()
def isFltqQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(313) & hasRd() & hasRs1() & hasRs2() & isRVQZFA()
def isFmaxmQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(314) & hasRd() & hasRs1() & hasRs2() & isRVQZFA()
def isFminmQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(315) & hasRd() & hasRs1() & hasRs2() & isRVQZFA()
def isFroundQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(316) & hasRd() & hasRm() & hasRs1() & isRVQZFA()
def isFroundnxQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(317) & hasRd() & hasRm() & hasRs1() & isRVQZFA()
def isFcvtHQ()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(318) & hasRd() & hasRm() & hasRs1() & isRVQZFH()
def isFcvtQH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(319) & hasRd() & hasRm() & hasRs1() & isRVQZFH()
def isSfenceVma()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(320) & hasRs1() & hasRs2() & isRVS()
def isSret()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(321) & isRVS()
def isDret()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(322) & isRVSDEXT()
def isSctrclr()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(323) & isRVSMDBLTRP()
def isMnret()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(324) & isRVSMRNMI()
def isHinvalGvma()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(325) & hasRs1() & hasRs2() & isRVSVINVAL()
def isHinvalVvma()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(326) & hasRs1() & hasRs2() & isRVSVINVAL()
def isSfenceInvalIr()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(327) & isRVSVINVAL()
def isSfenceWInval()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(328) & isRVSVINVAL()
def isSinvalVma()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(329) & hasRs1() & hasRs2() & isRVSVINVAL()
def isMret()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(330) & isRVSYSTEM()
def isWfi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(331) & isRVSYSTEM()
def isVaaddVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(332) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVaaddVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(333) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVaadduVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(334) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVaadduVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(335) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVadcVim()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(336) & hasVd() & hasSimm5() & hasVs2() & isRVV()
def isVadcVvm()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(337) & hasVd() & hasVs1() & hasVs2() & isRVV()
def isVadcVxm()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(338) & hasVd() & hasRs1() & hasVs2() & isRVV()
def isVaddVi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(339) & hasVd() & hasSimm5() & hasVs2() & hasVm() & isRVV()
def isVaddVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(340) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVaddVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(341) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVandVi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(342) & hasVd() & hasSimm5() & hasVs2() & hasVm() & isRVV()
def isVandVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(343) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVandVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(344) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVasubVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(345) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVasubVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(346) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVasubuVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(347) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVasubuVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(348) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVcompressVm()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(349) & hasVd() & hasVs1() & hasVs2() & isRVV()
def isVcpopM()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(350) & hasRd() & hasVs2() & hasVm() & isRVV()
def isVdivVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(351) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVdivVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(352) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVdivuVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(353) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVdivuVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(354) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfaddVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(355) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfaddVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(356) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfclassV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(357) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVfcvtFXV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(358) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVfcvtFXuV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(359) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVfcvtRtzXFV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(360) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVfcvtRtzXuFV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(361) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVfcvtXFV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(362) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVfcvtXuFV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(363) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVfdivVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(364) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfdivVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(365) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfirstM()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(366) & hasRd() & hasVs2() & hasVm() & isRVV()
def isVfmaccVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(367) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfmaccVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(368) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfmaddVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(369) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfmaddVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(370) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfmaxVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(371) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfmaxVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(372) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfmergeVfm()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(373) & hasVd() & hasRs1() & hasVs2() & isRVV()
def isVfminVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(374) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfminVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(375) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfmsacVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(376) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfmsacVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(377) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfmsubVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(378) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfmsubVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(379) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfmulVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(380) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfmulVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(381) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfmvFS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(382) & hasRd() & hasVs2() & isRVV()
def isVfmvSF()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(383) & hasVd() & hasRs1() & isRVV()
def isVfmvVF()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(384) & hasVd() & hasRs1() & isRVV()
def isVfncvtFFW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(385) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVfncvtFXW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(386) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVfncvtFXuW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(387) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVfncvtRodFFW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(388) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVfncvtRtzXFW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(389) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVfncvtRtzXuFW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(390) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVfncvtXFW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(391) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVfncvtXuFW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(392) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVfnmaccVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(393) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfnmaccVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(394) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfnmaddVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(395) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfnmaddVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(396) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfnmsacVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(397) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfnmsacVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(398) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfnmsubVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(399) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfnmsubVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(400) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfrdivVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(401) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfrec7V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(402) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVfredmaxVs()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(403) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfredminVs()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(404) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfredosumVs()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(405) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfredusumVs()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(406) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfrsqrt7V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(407) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVfrsubVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(408) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfsgnjVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(409) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfsgnjVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(410) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfsgnjnVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(411) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfsgnjnVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(412) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfsgnjxVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(413) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfsgnjxVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(414) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfslide1downVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(415) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfslide1upVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(416) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfsqrtV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(417) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVfsubVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(418) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfsubVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(419) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfwaddVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(420) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfwaddVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(421) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfwaddWf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(422) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfwaddWv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(423) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfwcvtFFV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(424) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVfwcvtFXV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(425) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVfwcvtFXuV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(426) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVfwcvtRtzXFV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(427) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVfwcvtRtzXuFV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(428) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVfwcvtXFV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(429) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVfwcvtXuFV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(430) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVfwmaccVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(431) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfwmaccVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(432) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfwmsacVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(433) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfwmsacVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(434) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfwmulVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(435) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfwmulVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(436) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfwnmaccVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(437) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfwnmaccVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(438) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfwnmsacVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(439) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfwnmsacVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(440) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfwredosumVs()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(441) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfwredusumVs()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(442) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfwsubVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(443) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfwsubVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(444) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVfwsubWf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(445) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVfwsubWv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(446) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVidV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(447) & hasVd() & hasVm() & isRVV()
def isViotaM()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(448) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVl1re16V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(449) & hasVd() & hasRs1() & isRVV()
def isVl1re32V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(450) & hasVd() & hasRs1() & isRVV()
def isVl1re64V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(451) & hasVd() & hasRs1() & isRVV()
def isVl1re8V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(452) & hasVd() & hasRs1() & isRVV()
def isVl2re16V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(453) & hasVd() & hasRs1() & isRVV()
def isVl2re32V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(454) & hasVd() & hasRs1() & isRVV()
def isVl2re64V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(455) & hasVd() & hasRs1() & isRVV()
def isVl2re8V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(456) & hasVd() & hasRs1() & isRVV()
def isVl4re16V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(457) & hasVd() & hasRs1() & isRVV()
def isVl4re32V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(458) & hasVd() & hasRs1() & isRVV()
def isVl4re64V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(459) & hasVd() & hasRs1() & isRVV()
def isVl4re8V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(460) & hasVd() & hasRs1() & isRVV()
def isVl8re16V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(461) & hasVd() & hasRs1() & isRVV()
def isVl8re32V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(462) & hasVd() & hasRs1() & isRVV()
def isVl8re64V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(463) & hasVd() & hasRs1() & isRVV()
def isVl8re8V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(464) & hasVd() & hasRs1() & isRVV()
def isVle16V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(465) & hasVd() & hasRs1() & hasVm() & hasNf() & isRVV()
def isVle16ffV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(466) & hasVd() & hasRs1() & hasVm() & hasNf() & isRVV()
def isVle32V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(467) & hasVd() & hasRs1() & hasVm() & hasNf() & isRVV()
def isVle32ffV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(468) & hasVd() & hasRs1() & hasVm() & hasNf() & isRVV()
def isVle64V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(469) & hasVd() & hasRs1() & hasVm() & hasNf() & isRVV()
def isVle64ffV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(470) & hasVd() & hasRs1() & hasVm() & hasNf() & isRVV()
def isVle8V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(471) & hasVd() & hasRs1() & hasVm() & hasNf() & isRVV()
def isVle8ffV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(472) & hasVd() & hasRs1() & hasVm() & hasNf() & isRVV()
def isVlmV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(473) & hasVd() & hasRs1() & isRVV()
def isVloxei16V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(474) & hasVd() & hasRs1() & hasVs2() & hasVm() & hasNf() & isRVV()
def isVloxei32V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(475) & hasVd() & hasRs1() & hasVs2() & hasVm() & hasNf() & isRVV()
def isVloxei64V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(476) & hasVd() & hasRs1() & hasVs2() & hasVm() & hasNf() & isRVV()
def isVloxei8V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(477) & hasVd() & hasRs1() & hasVs2() & hasVm() & hasNf() & isRVV()
def isVlse16V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(478) & hasVd() & hasRs1() & hasRs2() & hasVm() & hasNf() & isRVV()
def isVlse32V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(479) & hasVd() & hasRs1() & hasRs2() & hasVm() & hasNf() & isRVV()
def isVlse64V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(480) & hasVd() & hasRs1() & hasRs2() & hasVm() & hasNf() & isRVV()
def isVlse8V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(481) & hasVd() & hasRs1() & hasRs2() & hasVm() & hasNf() & isRVV()
def isVluxei16V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(482) & hasVd() & hasRs1() & hasVs2() & hasVm() & hasNf() & isRVV()
def isVluxei32V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(483) & hasVd() & hasRs1() & hasVs2() & hasVm() & hasNf() & isRVV()
def isVluxei64V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(484) & hasVd() & hasRs1() & hasVs2() & hasVm() & hasNf() & isRVV()
def isVluxei8V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(485) & hasVd() & hasRs1() & hasVs2() & hasVm() & hasNf() & isRVV()
def isVmaccVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(486) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVmaccVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(487) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVmadcVi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(488) & hasVd() & hasSimm5() & hasVs2() & isRVV()
def isVmadcVim()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(489) & hasVd() & hasSimm5() & hasVs2() & isRVV()
def isVmadcVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(490) & hasVd() & hasVs1() & hasVs2() & isRVV()
def isVmadcVvm()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(491) & hasVd() & hasVs1() & hasVs2() & isRVV()
def isVmadcVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(492) & hasVd() & hasRs1() & hasVs2() & isRVV()
def isVmadcVxm()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(493) & hasVd() & hasRs1() & hasVs2() & isRVV()
def isVmaddVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(494) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVmaddVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(495) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVmandMm()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(496) & hasVd() & hasVs1() & hasVs2() & isRVV()
def isVmandnMm()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(497) & hasVd() & hasVs1() & hasVs2() & isRVV()
def isVmaxVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(498) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVmaxVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(499) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVmaxuVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(500) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVmaxuVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(501) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVmergeVim()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(502) & hasVd() & hasSimm5() & hasVs2() & isRVV()
def isVmergeVvm()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(503) & hasVd() & hasVs1() & hasVs2() & isRVV()
def isVmergeVxm()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(504) & hasVd() & hasRs1() & hasVs2() & isRVV()
def isVmfeqVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(505) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVmfeqVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(506) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVmfgeVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(507) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVmfgtVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(508) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVmfleVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(509) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVmfleVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(510) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVmfltVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(511) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVmfltVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(512) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVmfneVf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(513) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVmfneVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(514) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVminVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(515) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVminVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(516) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVminuVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(517) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVminuVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(518) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVmnandMm()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(519) & hasVd() & hasVs1() & hasVs2() & isRVV()
def isVmnorMm()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(520) & hasVd() & hasVs1() & hasVs2() & isRVV()
def isVmorMm()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(521) & hasVd() & hasVs1() & hasVs2() & isRVV()
def isVmornMm()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(522) & hasVd() & hasVs1() & hasVs2() & isRVV()
def isVmsbcVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(523) & hasVd() & hasVs1() & hasVs2() & isRVV()
def isVmsbcVvm()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(524) & hasVd() & hasVs1() & hasVs2() & isRVV()
def isVmsbcVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(525) & hasVd() & hasRs1() & hasVs2() & isRVV()
def isVmsbcVxm()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(526) & hasVd() & hasRs1() & hasVs2() & isRVV()
def isVmsbfM()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(527) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVmseqVi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(528) & hasVd() & hasSimm5() & hasVs2() & hasVm() & isRVV()
def isVmseqVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(529) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVmseqVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(530) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVmsgtVi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(531) & hasVd() & hasSimm5() & hasVs2() & hasVm() & isRVV()
def isVmsgtVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(532) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVmsgtuVi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(533) & hasVd() & hasSimm5() & hasVs2() & hasVm() & isRVV()
def isVmsgtuVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(534) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVmsifM()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(535) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVmsleVi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(536) & hasVd() & hasSimm5() & hasVs2() & hasVm() & isRVV()
def isVmsleVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(537) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVmsleVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(538) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVmsleuVi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(539) & hasVd() & hasSimm5() & hasVs2() & hasVm() & isRVV()
def isVmsleuVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(540) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVmsleuVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(541) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVmsltVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(542) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVmsltVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(543) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVmsltuVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(544) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVmsltuVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(545) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVmsneVi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(546) & hasVd() & hasSimm5() & hasVs2() & hasVm() & isRVV()
def isVmsneVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(547) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVmsneVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(548) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVmsofM()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(549) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVmulVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(550) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVmulVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(551) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVmulhVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(552) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVmulhVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(553) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVmulhsuVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(554) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVmulhsuVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(555) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVmulhuVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(556) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVmulhuVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(557) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVmvSX()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(558) & hasVd() & hasRs1() & isRVV()
def isVmvVI()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(559) & hasVd() & hasSimm5() & isRVV()
def isVmvVV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(560) & hasVd() & hasVs1() & isRVV()
def isVmvVX()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(561) & hasVd() & hasRs1() & isRVV()
def isVmvXS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(562) & hasRd() & hasVs2() & isRVV()
def isVmv1rV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(563) & hasVd() & hasVs2() & isRVV()
def isVmv2rV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(564) & hasVd() & hasVs2() & isRVV()
def isVmv4rV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(565) & hasVd() & hasVs2() & isRVV()
def isVmv8rV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(566) & hasVd() & hasVs2() & isRVV()
def isVmxnorMm()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(567) & hasVd() & hasVs1() & hasVs2() & isRVV()
def isVmxorMm()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(568) & hasVd() & hasVs1() & hasVs2() & isRVV()
def isVnclipWi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(569) & hasVd() & hasSimm5() & hasVs2() & hasVm() & isRVV()
def isVnclipWv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(570) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVnclipWx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(571) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVnclipuWi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(572) & hasVd() & hasSimm5() & hasVs2() & hasVm() & isRVV()
def isVnclipuWv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(573) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVnclipuWx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(574) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVnmsacVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(575) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVnmsacVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(576) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVnmsubVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(577) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVnmsubVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(578) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVnsraWi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(579) & hasVd() & hasSimm5() & hasVs2() & hasVm() & isRVV()
def isVnsraWv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(580) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVnsraWx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(581) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVnsrlWi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(582) & hasVd() & hasSimm5() & hasVs2() & hasVm() & isRVV()
def isVnsrlWv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(583) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVnsrlWx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(584) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVorVi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(585) & hasVd() & hasSimm5() & hasVs2() & hasVm() & isRVV()
def isVorVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(586) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVorVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(587) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVredandVs()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(588) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVredmaxVs()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(589) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVredmaxuVs()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(590) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVredminVs()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(591) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVredminuVs()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(592) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVredorVs()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(593) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVredsumVs()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(594) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVredxorVs()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(595) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVremVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(596) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVremVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(597) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVremuVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(598) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVremuVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(599) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVrgatherVi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(600) & hasVd() & hasSimm5() & hasVs2() & hasVm() & isRVV()
def isVrgatherVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(601) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVrgatherVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(602) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVrgatherei16Vv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(603) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVrsubVi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(604) & hasVd() & hasSimm5() & hasVs2() & hasVm() & isRVV()
def isVrsubVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(605) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVs1rV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(606) & hasVs3() & hasRs1() & isRVV()
def isVs2rV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(607) & hasVs3() & hasRs1() & isRVV()
def isVs4rV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(608) & hasVs3() & hasRs1() & isRVV()
def isVs8rV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(609) & hasVs3() & hasRs1() & isRVV()
def isVsaddVi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(610) & hasVd() & hasSimm5() & hasVs2() & hasVm() & isRVV()
def isVsaddVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(611) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVsaddVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(612) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVsadduVi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(613) & hasVd() & hasSimm5() & hasVs2() & hasVm() & isRVV()
def isVsadduVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(614) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVsadduVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(615) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVsbcVvm()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(616) & hasVd() & hasVs1() & hasVs2() & isRVV()
def isVsbcVxm()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(617) & hasVd() & hasRs1() & hasVs2() & isRVV()
def isVse16V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(618) & hasVs3() & hasRs1() & hasVm() & hasNf() & isRVV()
def isVse32V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(619) & hasVs3() & hasRs1() & hasVm() & hasNf() & isRVV()
def isVse64V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(620) & hasVs3() & hasRs1() & hasVm() & hasNf() & isRVV()
def isVse8V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(621) & hasVs3() & hasRs1() & hasVm() & hasNf() & isRVV()
def isVsetivli()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(622) & hasRd() & hasZimm() & hasZimm10() & isRVV()
def isVsetvl()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(623) & hasRd() & hasRs1() & hasRs2() & isRVV()
def isVsetvli()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(624) & hasRd() & hasRs1() & hasZimm11() & isRVV()
def isVsextVf2()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(625) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVsextVf4()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(626) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVsextVf8()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(627) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVslide1downVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(628) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVslide1upVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(629) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVslidedownVi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(630) & hasVd() & hasSimm5() & hasVs2() & hasVm() & isRVV()
def isVslidedownVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(631) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVslideupVi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(632) & hasVd() & hasSimm5() & hasVs2() & hasVm() & isRVV()
def isVslideupVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(633) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVsllVi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(634) & hasVd() & hasSimm5() & hasVs2() & hasVm() & isRVV()
def isVsllVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(635) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVsllVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(636) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVsmV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(637) & hasVs3() & hasRs1() & isRVV()
def isVsmulVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(638) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVsmulVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(639) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVsoxei16V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(640) & hasVs3() & hasRs1() & hasVs2() & hasVm() & hasNf() & isRVV()
def isVsoxei32V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(641) & hasVs3() & hasRs1() & hasVs2() & hasVm() & hasNf() & isRVV()
def isVsoxei64V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(642) & hasVs3() & hasRs1() & hasVs2() & hasVm() & hasNf() & isRVV()
def isVsoxei8V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(643) & hasVs3() & hasRs1() & hasVs2() & hasVm() & hasNf() & isRVV()
def isVsraVi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(644) & hasVd() & hasSimm5() & hasVs2() & hasVm() & isRVV()
def isVsraVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(645) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVsraVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(646) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVsrlVi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(647) & hasVd() & hasSimm5() & hasVs2() & hasVm() & isRVV()
def isVsrlVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(648) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVsrlVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(649) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVsse16V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(650) & hasVs3() & hasRs1() & hasRs2() & hasVm() & hasNf() & isRVV()
def isVsse32V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(651) & hasVs3() & hasRs1() & hasRs2() & hasVm() & hasNf() & isRVV()
def isVsse64V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(652) & hasVs3() & hasRs1() & hasRs2() & hasVm() & hasNf() & isRVV()
def isVsse8V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(653) & hasVs3() & hasRs1() & hasRs2() & hasVm() & hasNf() & isRVV()
def isVssraVi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(654) & hasVd() & hasSimm5() & hasVs2() & hasVm() & isRVV()
def isVssraVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(655) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVssraVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(656) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVssrlVi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(657) & hasVd() & hasSimm5() & hasVs2() & hasVm() & isRVV()
def isVssrlVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(658) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVssrlVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(659) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVssubVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(660) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVssubVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(661) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVssubuVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(662) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVssubuVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(663) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVsubVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(664) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVsubVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(665) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVsuxei16V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(666) & hasVs3() & hasRs1() & hasVs2() & hasVm() & hasNf() & isRVV()
def isVsuxei32V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(667) & hasVs3() & hasRs1() & hasVs2() & hasVm() & hasNf() & isRVV()
def isVsuxei64V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(668) & hasVs3() & hasRs1() & hasVs2() & hasVm() & hasNf() & isRVV()
def isVsuxei8V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(669) & hasVs3() & hasRs1() & hasVs2() & hasVm() & hasNf() & isRVV()
def isVwaddVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(670) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVwaddVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(671) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVwaddWv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(672) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVwaddWx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(673) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVwadduVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(674) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVwadduVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(675) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVwadduWv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(676) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVwadduWx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(677) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVwmaccVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(678) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVwmaccVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(679) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVwmaccsuVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(680) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVwmaccsuVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(681) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVwmaccuVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(682) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVwmaccuVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(683) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVwmaccusVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(684) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVwmulVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(685) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVwmulVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(686) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVwmulsuVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(687) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVwmulsuVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(688) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVwmuluVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(689) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVwmuluVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(690) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVwredsumVs()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(691) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVwredsumuVs()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(692) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVwsubVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(693) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVwsubVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(694) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVwsubWv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(695) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVwsubWx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(696) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVwsubuVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(697) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVwsubuVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(698) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVwsubuWv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(699) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVwsubuWx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(700) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVxorVi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(701) & hasVd() & hasSimm5() & hasVs2() & hasVm() & isRVV()
def isVxorVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(702) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVV()
def isVxorVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(703) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVV()
def isVzextVf2()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(704) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVzextVf4()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(705) & hasVd() & hasVs2() & hasVm() & isRVV()
def isVzextVf8()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(706) & hasVd() & hasVs2() & hasVm() & isRVV()
def isAmoaddB()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(707) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVZABHA()
def isAmoaddH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(708) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVZABHA()
def isAmoandB()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(709) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVZABHA()
def isAmoandH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(710) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVZABHA()
def isAmocasB()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(711) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVZABHA()
def isAmocasH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(712) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVZABHA()
def isAmomaxB()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(713) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVZABHA()
def isAmomaxH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(714) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVZABHA()
def isAmomaxuB()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(715) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVZABHA()
def isAmomaxuH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(716) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVZABHA()
def isAmominB()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(717) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVZABHA()
def isAmominH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(718) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVZABHA()
def isAmominuB()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(719) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVZABHA()
def isAmominuH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(720) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVZABHA()
def isAmoorB()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(721) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVZABHA()
def isAmoorH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(722) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVZABHA()
def isAmoswapB()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(723) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVZABHA()
def isAmoswapH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(724) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVZABHA()
def isAmoxorB()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(725) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVZABHA()
def isAmoxorH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(726) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVZABHA()
def isAmocasD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(727) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVZACAS()
def isAmocasW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(728) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVZACAS()
def isLbAq()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(729) & hasRd() & hasRs1() & hasRl() & isRVZALASR()
def isLdAq()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(730) & hasRd() & hasRs1() & hasRl() & isRVZALASR()
def isLhAq()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(731) & hasRd() & hasRs1() & hasRl() & isRVZALASR()
def isLwAq()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(732) & hasRd() & hasRs1() & hasRl() & isRVZALASR()
def isSbRl()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(733) & hasRs1() & hasRs2() & hasAq() & isRVZALASR()
def isSdRl()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(734) & hasRs1() & hasRs2() & hasAq() & isRVZALASR()
def isShRl()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(735) & hasRs1() & hasRs2() & hasAq() & isRVZALASR()
def isSwRl()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(736) & hasRs1() & hasRs2() & hasAq() & isRVZALASR()
def isWrsNto()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(737) & isRVZAWRS()
def isWrsSto()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(738) & isRVZAWRS()
def isSh1add()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(739) & hasRd() & hasRs1() & hasRs2() & isRVZBA()
def isSh2add()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(740) & hasRd() & hasRs1() & hasRs2() & isRVZBA()
def isSh3add()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(741) & hasRd() & hasRs1() & hasRs2() & isRVZBA()
def isAndn()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(742) & hasRd() & hasRs1() & hasRs2() & (isRVZBB() | isRVZBKB() | isRVZK() | isRVZKN() | isRVZKS())
def isClz()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(743) & hasRd() & hasRs1() & isRVZBB()
def isCpop()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(744) & hasRd() & hasRs1() & isRVZBB()
def isCtz()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(745) & hasRd() & hasRs1() & isRVZBB()
def isMax()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(746) & hasRd() & hasRs1() & hasRs2() & isRVZBB()
def isMaxu()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(747) & hasRd() & hasRs1() & hasRs2() & isRVZBB()
def isMin()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(748) & hasRd() & hasRs1() & hasRs2() & isRVZBB()
def isMinu()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(749) & hasRd() & hasRs1() & hasRs2() & isRVZBB()
def isOrn()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(750) & hasRd() & hasRs1() & hasRs2() & (isRVZBB() | isRVZBKB() | isRVZK() | isRVZKN() | isRVZKS())
def isRol()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(751) & hasRd() & hasRs1() & hasRs2() & (isRVZBB() | isRVZBKB() | isRVZK() | isRVZKN() | isRVZKS())
def isRor()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(752) & hasRd() & hasRs1() & hasRs2() & (isRVZBB() | isRVZBKB() | isRVZK() | isRVZKN() | isRVZKS())
def isSextB()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(753) & hasRd() & hasRs1() & isRVZBB()
def isSextH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(754) & hasRd() & hasRs1() & isRVZBB()
def isXnor()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(755) & hasRd() & hasRs1() & hasRs2() & (isRVZBB() | isRVZBKB() | isRVZK() | isRVZKN() | isRVZKS())
def isClmul()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(756) & hasRd() & hasRs1() & hasRs2() & (isRVZBC() | isRVZBKC() | isRVZK() | isRVZKN() | isRVZKS())
def isClmulh()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(757) & hasRd() & hasRs1() & hasRs2() & (isRVZBC() | isRVZBKC() | isRVZK() | isRVZKN() | isRVZKS())
def isClmulr()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(758) & hasRd() & hasRs1() & hasRs2() & isRVZBC()
def isPack()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(759) & hasRd() & hasRs1() & hasRs2() & (isRVZBKB() | isRVZK() | isRVZKN() | isRVZKS())
def isPackh()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(760) & hasRd() & hasRs1() & hasRs2() & (isRVZBKB() | isRVZK() | isRVZKN() | isRVZKS())
def isXperm4()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(761) & hasRd() & hasRs1() & hasRs2() & (isRVZBKX() | isRVZK() | isRVZKN() | isRVZKS())
def isXperm8()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(762) & hasRd() & hasRs1() & hasRs2() & (isRVZBKX() | isRVZK() | isRVZKN() | isRVZKS())
def isXperm16()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(763) & hasRd() & hasRs1() & hasRs2() & isRVZBP()
def isBclr()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(764) & hasRd() & hasRs1() & hasRs2() & isRVZBS()
def isBext()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(765) & hasRd() & hasRs1() & hasRs2() & isRVZBS()
def isBinv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(766) & hasRd() & hasRs1() & hasRs2() & isRVZBS()
def isBset()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(767) & hasRd() & hasRs1() & hasRs2() & isRVZBS()
def isCLbu()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(768) & hasRdP() & hasCUimm2() & hasRs1P() & isRVZCB()
def isCLh()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(769) & hasRdP() & hasCUimm1() & hasRs1P() & isRVZCB()
def isCLhu()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(770) & hasRdP() & hasCUimm1() & hasRs1P() & isRVZCB()
def isCMul()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(771) & hasRs2P() & hasRdRs1P() & isRVZCB()
def isCNot()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(772) & hasRdRs1P() & isRVZCB()
def isCSb()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(773) & hasRs2P() & hasCUimm2() & hasRs1P() & isRVZCB()
def isCSextB()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(774) & hasRdRs1P() & isRVZCB()
def isCSextH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(775) & hasRdRs1P() & isRVZCB()
def isCSh()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(776) & hasRs2P() & hasCUimm1() & hasRs1P() & isRVZCB()
def isCZextB()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(777) & hasRdRs1P() & isRVZCB()
def isCZextH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(778) & hasRdRs1P() & isRVZCB()
def isCMopN()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(779) & isRVZCMOP()
def isCmMva01s()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(780) & hasCSreg2() & hasCSreg1() & isRVZCMP()
def isCmMvsa01()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(781) & hasCSreg2() & hasCSreg1() & isRVZCMP()
def isCmPop()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(782) & hasCSpimm() & hasCRlist() & isRVZCMP()
def isCmPopret()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(783) & hasCSpimm() & hasCRlist() & isRVZCMP()
def isCmPopretz()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(784) & hasCSpimm() & hasCRlist() & isRVZCMP()
def isCmPush()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(785) & hasCSpimm() & hasCRlist() & isRVZCMP()
def isCmJalt()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(786) & hasCIndex() & isRVZCMT()
def isFcvtBf16S()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(787) & hasRd() & hasRm() & hasRs1() & isRVZFBFMIN()
def isFcvtSBf16()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(788) & hasRd() & hasRm() & hasRs1() & isRVZFBFMIN()
def isFaddH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(789) & hasRd() & hasRm() & hasRs1() & hasRs2() & isRVZFH()
def isFclassH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(790) & hasRd() & hasRs1() & isRVZFH()
def isFcvtHS()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(791) & hasRd() & hasRm() & hasRs1() & isRVZFH()
def isFcvtHW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(792) & hasRd() & hasRm() & hasRs1() & isRVZFH()
def isFcvtHWu()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(793) & hasRd() & hasRm() & hasRs1() & isRVZFH()
def isFcvtSH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(794) & hasRd() & hasRm() & hasRs1() & isRVZFH()
def isFcvtWH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(795) & hasRd() & hasRm() & hasRs1() & isRVZFH()
def isFcvtWuH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(796) & hasRd() & hasRm() & hasRs1() & isRVZFH()
def isFdivH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(797) & hasRd() & hasRm() & hasRs1() & hasRs2() & isRVZFH()
def isFeqH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(798) & hasRd() & hasRs1() & hasRs2() & isRVZFH()
def isFleH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(799) & hasRd() & hasRs1() & hasRs2() & isRVZFH()
def isFlh()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(800) & hasRd() & hasRs1() & hasImm12() & isRVZFH()
def isFltH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(801) & hasRd() & hasRs1() & hasRs2() & isRVZFH()
def isFmaddH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(802) & hasRd() & hasRm() & hasRs1() & hasRs2() & hasRs3() & isRVZFH()
def isFmaxH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(803) & hasRd() & hasRs1() & hasRs2() & isRVZFH()
def isFminH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(804) & hasRd() & hasRs1() & hasRs2() & isRVZFH()
def isFmsubH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(805) & hasRd() & hasRm() & hasRs1() & hasRs2() & hasRs3() & isRVZFH()
def isFmulH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(806) & hasRd() & hasRm() & hasRs1() & hasRs2() & isRVZFH()
def isFmvHX()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(807) & hasRd() & hasRs1() & isRVZFH()
def isFmvXH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(808) & hasRd() & hasRs1() & isRVZFH()
def isFnmaddH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(809) & hasRd() & hasRm() & hasRs1() & hasRs2() & hasRs3() & isRVZFH()
def isFnmsubH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(810) & hasRd() & hasRm() & hasRs1() & hasRs2() & hasRs3() & isRVZFH()
def isFsgnjH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(811) & hasRd() & hasRs1() & hasRs2() & isRVZFH()
def isFsgnjnH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(812) & hasRd() & hasRs1() & hasRs2() & isRVZFH()
def isFsgnjxH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(813) & hasRd() & hasRs1() & hasRs2() & isRVZFH()
def isFsh()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(814) & hasImm12lo() & hasRs1() & hasRs2() & hasImm12hi() & isRVZFH()
def isFsqrtH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(815) & hasRd() & hasRm() & hasRs1() & isRVZFH()
def isFsubH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(816) & hasRd() & hasRm() & hasRs1() & hasRs2() & isRVZFH()
def isFleqH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(817) & hasRd() & hasRs1() & hasRs2() & isRVZFHZFA()
def isFliH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(818) & hasRd() & hasRs1() & isRVZFHZFA()
def isFltqH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(819) & hasRd() & hasRs1() & hasRs2() & isRVZFHZFA()
def isFmaxmH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(820) & hasRd() & hasRs1() & hasRs2() & isRVZFHZFA()
def isFminmH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(821) & hasRd() & hasRs1() & hasRs2() & isRVZFHZFA()
def isFroundH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(822) & hasRd() & hasRm() & hasRs1() & isRVZFHZFA()
def isFroundnxH()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(823) & hasRd() & hasRm() & hasRs1() & isRVZFHZFA()
def isCboClean()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(824) & hasRs1() & isRVZICBO()
def isCboFlush()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(825) & hasRs1() & isRVZICBO()
def isCboInval()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(826) & hasRs1() & isRVZICBO()
def isCboZero()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(827) & hasRs1() & isRVZICBO()
def isSsamoswapD()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(828) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVZICFISS()
def isSsamoswapW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(829) & hasRd() & hasRs1() & hasRs2() & hasRl() & hasAq() & isRVZICFISS()
def isCzeroEqz()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(830) & hasRd() & hasRs1() & hasRs2() & isRVZICOND()
def isCzeroNez()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(831) & hasRd() & hasRs1() & hasRs2() & isRVZICOND()
def isCsrrc()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(832) & hasRd() & hasRs1() & hasCsr() & isRVZICSR()
def isCsrrci()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(833) & hasRd() & hasZimm() & hasCsr() & isRVZICSR()
def isCsrrs()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(834) & hasRd() & hasRs1() & hasCsr() & isRVZICSR()
def isCsrrsi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(835) & hasRd() & hasZimm() & hasCsr() & isRVZICSR()
def isCsrrw()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(836) & hasRd() & hasRs1() & hasCsr() & isRVZICSR()
def isCsrrwi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(837) & hasRd() & hasZimm() & hasCsr() & isRVZICSR()
def isFenceI()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(838) & hasRd() & hasRs1() & hasImm12() & isRVZIFENCEI()
def isMopRN()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(839) & hasRd() & hasRs1() & isRVZIMOP()
def isMopRrN()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(840) & hasRd() & hasRs1() & hasRs2() & isRVZIMOP()
def isSha256sig0()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(841) & hasRd() & hasRs1() & (isRVZKNH() | isRVZK() | isRVZKN())
def isSha256sig1()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(842) & hasRd() & hasRs1() & (isRVZKNH() | isRVZK() | isRVZKN())
def isSha256sum0()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(843) & hasRd() & hasRs1() & (isRVZKNH() | isRVZK() | isRVZKN())
def isSha256sum1()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(844) & hasRd() & hasRs1() & (isRVZKNH() | isRVZK() | isRVZKN())
def isSm4ed()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(845) & hasRd() & hasRs1() & hasRs2() & hasBs() & (isRVZKSED() | isRVZKS())
def isSm4ks()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(846) & hasRd() & hasRs1() & hasRs2() & hasBs() & (isRVZKSED() | isRVZKS())
def isSm3p0()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(847) & hasRd() & hasRs1() & (isRVZKSH() | isRVZKS())
def isSm3p1()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(848) & hasRd() & hasRs1() & (isRVZKSH() | isRVZKS())
def isVandnVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(849) & hasVd() & hasVs1() & hasVs2() & hasVm() & (isRVZVBB() | isRVZVKN() | isRVZVKS())
def isVandnVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(850) & hasVd() & hasRs1() & hasVs2() & hasVm() & (isRVZVBB() | isRVZVKN() | isRVZVKS())
def isVbrevV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(851) & hasVd() & hasVs2() & hasVm() & (isRVZVBB() | isRVZVKN() | isRVZVKS())
def isVbrev8V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(852) & hasVd() & hasVs2() & hasVm() & (isRVZVBB() | isRVZVKN() | isRVZVKS())
def isVclzV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(853) & hasVd() & hasVs2() & hasVm() & (isRVZVBB() | isRVZVKN() | isRVZVKS())
def isVcpopV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(854) & hasVd() & hasVs2() & hasVm() & (isRVZVBB() | isRVZVKN() | isRVZVKS())
def isVctzV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(855) & hasVd() & hasVs2() & hasVm() & (isRVZVBB() | isRVZVKN() | isRVZVKS())
def isVrev8V()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(856) & hasVd() & hasVs2() & hasVm() & (isRVZVBB() | isRVZVKN() | isRVZVKS())
def isVrolVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(857) & hasVd() & hasVs1() & hasVs2() & hasVm() & (isRVZVBB() | isRVZVKN() | isRVZVKS())
def isVrolVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(858) & hasVd() & hasRs1() & hasVs2() & hasVm() & (isRVZVBB() | isRVZVKN() | isRVZVKS())
def isVrorVi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(859) & hasVd() & hasZimm6lo() & hasVs2() & hasVm() & hasZimm6hi() & (isRVZVBB() | isRVZVKN() | isRVZVKS())
def isVrorVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(860) & hasVd() & hasVs1() & hasVs2() & hasVm() & (isRVZVBB() | isRVZVKN() | isRVZVKS())
def isVrorVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(861) & hasVd() & hasRs1() & hasVs2() & hasVm() & (isRVZVBB() | isRVZVKN() | isRVZVKS())
def isVwsllVi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(862) & hasVd() & hasZimm5() & hasVs2() & hasVm() & (isRVZVBB() | isRVZVKN() | isRVZVKS())
def isVwsllVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(863) & hasVd() & hasVs1() & hasVs2() & hasVm() & (isRVZVBB() | isRVZVKN() | isRVZVKS())
def isVwsllVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(864) & hasVd() & hasRs1() & hasVs2() & hasVm() & (isRVZVBB() | isRVZVKN() | isRVZVKS())
def isVclmulVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(865) & hasVd() & hasVs1() & hasVs2() & hasVm() & (isRVZVBC() | isRVZVKN() | isRVZVKS())
def isVclmulVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(866) & hasVd() & hasRs1() & hasVs2() & hasVm() & (isRVZVBC() | isRVZVKN() | isRVZVKS())
def isVclmulhVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(867) & hasVd() & hasVs1() & hasVs2() & hasVm() & (isRVZVBC() | isRVZVKN() | isRVZVKS())
def isVclmulhVx()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(868) & hasVd() & hasRs1() & hasVs2() & hasVm() & (isRVZVBC() | isRVZVKN() | isRVZVKS())
def isVfncvtbf16FFW()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(869) & hasVd() & hasVs2() & hasVm() & isRVZVFBFMIN()
def isVfwcvtbf16FFV()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(870) & hasVd() & hasVs2() & hasVm() & isRVZVFBFMIN()
def isVfwmaccbf16Vf()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(871) & hasVd() & hasRs1() & hasVs2() & hasVm() & isRVZVFBFWMA()
def isVfwmaccbf16Vv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(872) & hasVd() & hasVs1() & hasVs2() & hasVm() & isRVZVFBFWMA()
def isVghshVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(873) & hasVd() & hasVs1() & hasVs2() & isRVZVKG()
def isVgmulVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(874) & hasVd() & hasVs2() & isRVZVKG()
def isVaesdfVs()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(875) & hasVd() & hasVs2() & (isRVZVKNED() | isRVZVKN())
def isVaesdfVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(876) & hasVd() & hasVs2() & (isRVZVKNED() | isRVZVKN())
def isVaesdmVs()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(877) & hasVd() & hasVs2() & (isRVZVKNED() | isRVZVKN())
def isVaesdmVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(878) & hasVd() & hasVs2() & (isRVZVKNED() | isRVZVKN())
def isVaesefVs()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(879) & hasVd() & hasVs2() & (isRVZVKNED() | isRVZVKN())
def isVaesefVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(880) & hasVd() & hasVs2() & (isRVZVKNED() | isRVZVKN())
def isVaesemVs()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(881) & hasVd() & hasVs2() & (isRVZVKNED() | isRVZVKN())
def isVaesemVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(882) & hasVd() & hasVs2() & (isRVZVKNED() | isRVZVKN())
def isVaeskf1Vi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(883) & hasVd() & hasZimm5() & hasVs2() & (isRVZVKNED() | isRVZVKN())
def isVaeskf2Vi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(884) & hasVd() & hasZimm5() & hasVs2() & (isRVZVKNED() | isRVZVKN())
def isVaeszVs()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(885) & hasVd() & hasVs2() & (isRVZVKNED() | isRVZVKN())
def isVsha2chVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(886) & hasVd() & hasVs1() & hasVs2() & (isRVZVKNHA() | isRVZVKN() | isRVZVKNHB())
def isVsha2clVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(887) & hasVd() & hasVs1() & hasVs2() & (isRVZVKNHA() | isRVZVKN() | isRVZVKNHB())
def isVsha2msVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(888) & hasVd() & hasVs1() & hasVs2() & (isRVZVKNHA() | isRVZVKN() | isRVZVKNHB())
def isVsm4kVi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(889) & hasVd() & hasZimm5() & hasVs2() & (isRVZVKSED() | isRVZVKS())
def isVsm4rVs()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(890) & hasVd() & hasVs2() & (isRVZVKSED() | isRVZVKS())
def isVsm4rVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(891) & hasVd() & hasVs2() & (isRVZVKSED() | isRVZVKS())
def isVsm3cVi()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(892) & hasVd() & hasZimm5() & hasVs2() & (isRVZVKSH() | isRVZVKS())
def isVsm3meVv()(using Arena, Context, Block, Index, Recipe): Ref[Bool] = nameId(893) & hasVd() & hasVs1() & hasVs2() & (isRVZVKSH() | isRVZVKS())

case class Recipe(val name: String)(using Arena, Context, Block) {
  private val indices = scala.collection.mutable.Map[Int, Index]()
  val rv32_c = smtValue("rv32_c", Bool)
  val rv32_c_f = smtValue("rv32_c_f", Bool)
  val rv32_d_zfa = smtValue("rv32_d_zfa", Bool)
  val rv32_i = smtValue("rv32_i", Bool)
  val rv32_zbb = smtValue("rv32_zbb", Bool)
  val rv32_zbkb = smtValue("rv32_zbkb", Bool)
  val rv32_zbs = smtValue("rv32_zbs", Bool)
  val rv32_zicntr = smtValue("rv32_zicntr", Bool)
  val rv32_zk = smtValue("rv32_zk", Bool)
  val rv32_zkn = smtValue("rv32_zkn", Bool)
  val rv32_zknd = smtValue("rv32_zknd", Bool)
  val rv32_zkne = smtValue("rv32_zkne", Bool)
  val rv32_zknh = smtValue("rv32_zknh", Bool)
  val rv32_zks = smtValue("rv32_zks", Bool)
  val rv64_a = smtValue("rv64_a", Bool)
  val rv64_c = smtValue("rv64_c", Bool)
  val rv64_d = smtValue("rv64_d", Bool)
  val rv64_f = smtValue("rv64_f", Bool)
  val rv64_h = smtValue("rv64_h", Bool)
  val rv64_i = smtValue("rv64_i", Bool)
  val rv64_m = smtValue("rv64_m", Bool)
  val rv64_q = smtValue("rv64_q", Bool)
  val rv64_q_zfa = smtValue("rv64_q_zfa", Bool)
  val rv64_zacas = smtValue("rv64_zacas", Bool)
  val rv64_zba = smtValue("rv64_zba", Bool)
  val rv64_zbb = smtValue("rv64_zbb", Bool)
  val rv64_zbkb = smtValue("rv64_zbkb", Bool)
  val rv64_zbp = smtValue("rv64_zbp", Bool)
  val rv64_zbs = smtValue("rv64_zbs", Bool)
  val rv64_zcb = smtValue("rv64_zcb", Bool)
  val rv64_zfh = smtValue("rv64_zfh", Bool)
  val rv64_zk = smtValue("rv64_zk", Bool)
  val rv64_zkn = smtValue("rv64_zkn", Bool)
  val rv64_zknd = smtValue("rv64_zknd", Bool)
  val rv64_zkne = smtValue("rv64_zkne", Bool)
  val rv64_zknh = smtValue("rv64_zknh", Bool)
  val rv64_zks = smtValue("rv64_zks", Bool)
  val rv_a = smtValue("rv_a", Bool)
  val rv_c = smtValue("rv_c", Bool)
  val rv_c_d = smtValue("rv_c_d", Bool)
  val rv_c_zicfiss = smtValue("rv_c_zicfiss", Bool)
  val rv_c_zihintntl = smtValue("rv_c_zihintntl", Bool)
  val rv_d = smtValue("rv_d", Bool)
  val rv_d_zfa = smtValue("rv_d_zfa", Bool)
  val rv_d_zfh = smtValue("rv_d_zfh", Bool)
  val rv_f = smtValue("rv_f", Bool)
  val rv_f_zfa = smtValue("rv_f_zfa", Bool)
  val rv_h = smtValue("rv_h", Bool)
  val rv_i = smtValue("rv_i", Bool)
  val rv_m = smtValue("rv_m", Bool)
  val rv_q = smtValue("rv_q", Bool)
  val rv_q_zfa = smtValue("rv_q_zfa", Bool)
  val rv_q_zfh = smtValue("rv_q_zfh", Bool)
  val rv_s = smtValue("rv_s", Bool)
  val rv_sdext = smtValue("rv_sdext", Bool)
  val rv_smdbltrp = smtValue("rv_smdbltrp", Bool)
  val rv_smrnmi = smtValue("rv_smrnmi", Bool)
  val rv_svinval = smtValue("rv_svinval", Bool)
  val rv_system = smtValue("rv_system", Bool)
  val rv_v = smtValue("rv_v", Bool)
  val rv_v_aliases = smtValue("rv_v_aliases", Bool)
  val rv_zabha = smtValue("rv_zabha", Bool)
  val rv_zacas = smtValue("rv_zacas", Bool)
  val rv_zalasr = smtValue("rv_zalasr", Bool)
  val rv_zawrs = smtValue("rv_zawrs", Bool)
  val rv_zba = smtValue("rv_zba", Bool)
  val rv_zbb = smtValue("rv_zbb", Bool)
  val rv_zbc = smtValue("rv_zbc", Bool)
  val rv_zbkb = smtValue("rv_zbkb", Bool)
  val rv_zbkc = smtValue("rv_zbkc", Bool)
  val rv_zbkx = smtValue("rv_zbkx", Bool)
  val rv_zbp = smtValue("rv_zbp", Bool)
  val rv_zbs = smtValue("rv_zbs", Bool)
  val rv_zcb = smtValue("rv_zcb", Bool)
  val rv_zcmop = smtValue("rv_zcmop", Bool)
  val rv_zcmp = smtValue("rv_zcmp", Bool)
  val rv_zcmt = smtValue("rv_zcmt", Bool)
  val rv_zfbfmin = smtValue("rv_zfbfmin", Bool)
  val rv_zfh = smtValue("rv_zfh", Bool)
  val rv_zfh_zfa = smtValue("rv_zfh_zfa", Bool)
  val rv_zicbo = smtValue("rv_zicbo", Bool)
  val rv_zicfilp = smtValue("rv_zicfilp", Bool)
  val rv_zicfiss = smtValue("rv_zicfiss", Bool)
  val rv_zicntr = smtValue("rv_zicntr", Bool)
  val rv_zicond = smtValue("rv_zicond", Bool)
  val rv_zicsr = smtValue("rv_zicsr", Bool)
  val rv_zifencei = smtValue("rv_zifencei", Bool)
  val rv_zihintntl = smtValue("rv_zihintntl", Bool)
  val rv_zimop = smtValue("rv_zimop", Bool)
  val rv_zk = smtValue("rv_zk", Bool)
  val rv_zkn = smtValue("rv_zkn", Bool)
  val rv_zknh = smtValue("rv_zknh", Bool)
  val rv_zks = smtValue("rv_zks", Bool)
  val rv_zksed = smtValue("rv_zksed", Bool)
  val rv_zksh = smtValue("rv_zksh", Bool)
  val rv_zvbb = smtValue("rv_zvbb", Bool)
  val rv_zvbc = smtValue("rv_zvbc", Bool)
  val rv_zvfbfmin = smtValue("rv_zvfbfmin", Bool)
  val rv_zvfbfwma = smtValue("rv_zvfbfwma", Bool)
  val rv_zvkg = smtValue("rv_zvkg", Bool)
  val rv_zvkn = smtValue("rv_zvkn", Bool)
  val rv_zvkned = smtValue("rv_zvkned", Bool)
  val rv_zvknha = smtValue("rv_zvknha", Bool)
  val rv_zvknhb = smtValue("rv_zvknhb", Bool)
  val rv_zvks = smtValue("rv_zvks", Bool)
  val rv_zvksed = smtValue("rv_zvksed", Bool)
  val rv_zvksh = smtValue("rv_zvksh", Bool)
  val allSets: List[Ref[Bool]] = List(rv32_c, rv32_c_f, rv32_d_zfa, rv32_i, rv32_zbb, rv32_zbkb, rv32_zbs, rv32_zicntr, rv32_zk, rv32_zkn, rv32_zknd, rv32_zkne, rv32_zknh, rv32_zks, rv64_a, rv64_c, rv64_d, rv64_f, rv64_h, rv64_i, rv64_m, rv64_q, rv64_q_zfa, rv64_zacas, rv64_zba, rv64_zbb, rv64_zbkb, rv64_zbp, rv64_zbs, rv64_zcb, rv64_zfh, rv64_zk, rv64_zkn, rv64_zknd, rv64_zkne, rv64_zknh, rv64_zks, rv_a, rv_c, rv_c_d, rv_c_zicfiss, rv_c_zihintntl, rv_d, rv_d_zfa, rv_d_zfh, rv_f, rv_f_zfa, rv_h, rv_i, rv_m, rv_q, rv_q_zfa, rv_q_zfh, rv_s, rv_sdext, rv_smdbltrp, rv_smrnmi, rv_svinval, rv_system, rv_v, rv_v_aliases, rv_zabha, rv_zacas, rv_zalasr, rv_zawrs, rv_zba, rv_zbb, rv_zbc, rv_zbkb, rv_zbkc, rv_zbkx, rv_zbp, rv_zbs, rv_zcb, rv_zcmop, rv_zcmp, rv_zcmt, rv_zfbfmin, rv_zfh, rv_zfh_zfa, rv_zicbo, rv_zicfilp, rv_zicfiss, rv_zicntr, rv_zicond, rv_zicsr, rv_zifencei, rv_zihintntl, rv_zimop, rv_zk, rv_zkn, rv_zknh, rv_zks, rv_zksed, rv_zksh, rv_zvbb, rv_zvbc, rv_zvfbfmin, rv_zvfbfwma, rv_zvkg, rv_zvkn, rv_zvkned, rv_zvknha, rv_zvknhb, rv_zvks, rv_zvksed, rv_zvksh)

  def addIndex(idx: Index): Index = {
    indices.getOrElseUpdate(idx.idx, idx)
  }

  override def toString(): String = {
    val indexStrings = indices.values.map(_.toString).mkString("\n")
    s"Recipe: $name\nIndices:\n$indexStrings"
  }
}

case class Index(val idx: Int)(using Arena, Context, Block) {
  val nameId = smtValue(s"nameId_${idx}", SInt)
  val amoop = smtValue(s"amoop_${idx}", SInt)
  val aq = smtValue(s"aq_${idx}", SInt)
  val aqrl = smtValue(s"aqrl_${idx}", SInt)
  val bimm12hi = smtValue(s"bimm12hi_${idx}", SInt)
  val bimm12lo = smtValue(s"bimm12lo_${idx}", SInt)
  val bs = smtValue(s"bs_${idx}", SInt)
  val cBimm9hi = smtValue(s"c_bimm9hi_${idx}", SInt)
  val cBimm9lo = smtValue(s"c_bimm9lo_${idx}", SInt)
  val cImm12 = smtValue(s"c_imm12_${idx}", SInt)
  val cImm6hi = smtValue(s"c_imm6hi_${idx}", SInt)
  val cImm6lo = smtValue(s"c_imm6lo_${idx}", SInt)
  val cIndex = smtValue(s"c_index_${idx}", SInt)
  val cNzimm10hi = smtValue(s"c_nzimm10hi_${idx}", SInt)
  val cNzimm10lo = smtValue(s"c_nzimm10lo_${idx}", SInt)
  val cNzimm18hi = smtValue(s"c_nzimm18hi_${idx}", SInt)
  val cNzimm18lo = smtValue(s"c_nzimm18lo_${idx}", SInt)
  val cNzimm6hi = smtValue(s"c_nzimm6hi_${idx}", SInt)
  val cNzimm6lo = smtValue(s"c_nzimm6lo_${idx}", SInt)
  val cNzuimm10 = smtValue(s"c_nzuimm10_${idx}", SInt)
  val cNzuimm5 = smtValue(s"c_nzuimm5_${idx}", SInt)
  val cNzuimm6hi = smtValue(s"c_nzuimm6hi_${idx}", SInt)
  val cNzuimm6lo = smtValue(s"c_nzuimm6lo_${idx}", SInt)
  val cRlist = smtValue(s"c_rlist_${idx}", SInt)
  val cRs1N0 = smtValue(s"c_rs1_n0_${idx}", SInt)
  val cRs2 = smtValue(s"c_rs2_${idx}", SInt)
  val cRs2N0 = smtValue(s"c_rs2_n0_${idx}", SInt)
  val cSpimm = smtValue(s"c_spimm_${idx}", SInt)
  val cSreg1 = smtValue(s"c_sreg1_${idx}", SInt)
  val cSreg2 = smtValue(s"c_sreg2_${idx}", SInt)
  val cUimm1 = smtValue(s"c_uimm1_${idx}", SInt)
  val cUimm10spS = smtValue(s"c_uimm10sp_s_${idx}", SInt)
  val cUimm10sphi = smtValue(s"c_uimm10sphi_${idx}", SInt)
  val cUimm10splo = smtValue(s"c_uimm10splo_${idx}", SInt)
  val cUimm2 = smtValue(s"c_uimm2_${idx}", SInt)
  val cUimm7hi = smtValue(s"c_uimm7hi_${idx}", SInt)
  val cUimm7lo = smtValue(s"c_uimm7lo_${idx}", SInt)
  val cUimm8hi = smtValue(s"c_uimm8hi_${idx}", SInt)
  val cUimm8lo = smtValue(s"c_uimm8lo_${idx}", SInt)
  val cUimm8spS = smtValue(s"c_uimm8sp_s_${idx}", SInt)
  val cUimm8sphi = smtValue(s"c_uimm8sphi_${idx}", SInt)
  val cUimm8splo = smtValue(s"c_uimm8splo_${idx}", SInt)
  val cUimm9hi = smtValue(s"c_uimm9hi_${idx}", SInt)
  val cUimm9lo = smtValue(s"c_uimm9lo_${idx}", SInt)
  val cUimm9spS = smtValue(s"c_uimm9sp_s_${idx}", SInt)
  val cUimm9sphi = smtValue(s"c_uimm9sphi_${idx}", SInt)
  val cUimm9splo = smtValue(s"c_uimm9splo_${idx}", SInt)
  val csr = smtValue(s"csr_${idx}", SInt)
  val fm = smtValue(s"fm_${idx}", SInt)
  val funct2 = smtValue(s"funct2_${idx}", SInt)
  val funct3 = smtValue(s"funct3_${idx}", SInt)
  val funct7 = smtValue(s"funct7_${idx}", SInt)
  val imm12 = smtValue(s"imm12_${idx}", SInt)
  val imm12hi = smtValue(s"imm12hi_${idx}", SInt)
  val imm12lo = smtValue(s"imm12lo_${idx}", SInt)
  val imm2 = smtValue(s"imm2_${idx}", SInt)
  val imm20 = smtValue(s"imm20_${idx}", SInt)
  val imm3 = smtValue(s"imm3_${idx}", SInt)
  val imm4 = smtValue(s"imm4_${idx}", SInt)
  val imm5 = smtValue(s"imm5_${idx}", SInt)
  val imm6 = smtValue(s"imm6_${idx}", SInt)
  val jimm20 = smtValue(s"jimm20_${idx}", SInt)
  val nf = smtValue(s"nf_${idx}", SInt)
  val opcode = smtValue(s"opcode_${idx}", SInt)
  val pred = smtValue(s"pred_${idx}", SInt)
  val rc = smtValue(s"rc_${idx}", SInt)
  val rd = smtValue(s"rd_${idx}", SInt)
  val rdN0 = smtValue(s"rd_n0_${idx}", SInt)
  val rdN2 = smtValue(s"rd_n2_${idx}", SInt)
  val rdP = smtValue(s"rd_p_${idx}", SInt)
  val rdRs1 = smtValue(s"rd_rs1_${idx}", SInt)
  val rdRs1N0 = smtValue(s"rd_rs1_n0_${idx}", SInt)
  val rdRs1P = smtValue(s"rd_rs1_p_${idx}", SInt)
  val rl = smtValue(s"rl_${idx}", SInt)
  val rm = smtValue(s"rm_${idx}", SInt)
  val rnum = smtValue(s"rnum_${idx}", SInt)
  val rs1 = smtValue(s"rs1_${idx}", SInt)
  val rs1N0 = smtValue(s"rs1_n0_${idx}", SInt)
  val rs1P = smtValue(s"rs1_p_${idx}", SInt)
  val rs2 = smtValue(s"rs2_${idx}", SInt)
  val rs2P = smtValue(s"rs2_p_${idx}", SInt)
  val rs3 = smtValue(s"rs3_${idx}", SInt)
  val rt = smtValue(s"rt_${idx}", SInt)
  val shamtd = smtValue(s"shamtd_${idx}", SInt)
  val shamtq = smtValue(s"shamtq_${idx}", SInt)
  val shamtw = smtValue(s"shamtw_${idx}", SInt)
  val shamtw4 = smtValue(s"shamtw4_${idx}", SInt)
  val simm5 = smtValue(s"simm5_${idx}", SInt)
  val succ = smtValue(s"succ_${idx}", SInt)
  val vd = smtValue(s"vd_${idx}", SInt)
  val vm = smtValue(s"vm_${idx}", SInt)
  val vs1 = smtValue(s"vs1_${idx}", SInt)
  val vs2 = smtValue(s"vs2_${idx}", SInt)
  val vs3 = smtValue(s"vs3_${idx}", SInt)
  val wd = smtValue(s"wd_${idx}", SInt)
  val zimm = smtValue(s"zimm_${idx}", SInt)
  val zimm10 = smtValue(s"zimm10_${idx}", SInt)
  val zimm11 = smtValue(s"zimm11_${idx}", SInt)
  val zimm5 = smtValue(s"zimm5_${idx}", SInt)
  val zimm6hi = smtValue(s"zimm6hi_${idx}", SInt)
  val zimm6lo = smtValue(s"zimm6lo_${idx}", SInt)

  override def toString: String = s"${idx}, $${nameId_${idx}}, $${amoop_${idx}}, $${aq_${idx}}, $${aqrl_${idx}}, $${bimm12hi_${idx}}, $${bimm12lo_${idx}}, $${bs_${idx}}, $${cBimm9hi_${idx}}, $${cBimm9lo_${idx}}, $${cImm12_${idx}}, $${cImm6hi_${idx}}, $${cImm6lo_${idx}}, $${cIndex_${idx}}, $${cNzimm10hi_${idx}}, $${cNzimm10lo_${idx}}, $${cNzimm18hi_${idx}}, $${cNzimm18lo_${idx}}, $${cNzimm6hi_${idx}}, $${cNzimm6lo_${idx}}, $${cNzuimm10_${idx}}, $${cNzuimm5_${idx}}, $${cNzuimm6hi_${idx}}, $${cNzuimm6lo_${idx}}, $${cRlist_${idx}}, $${cRs1N0_${idx}}, $${cRs2_${idx}}, $${cRs2N0_${idx}}, $${cSpimm_${idx}}, $${cSreg1_${idx}}, $${cSreg2_${idx}}, $${cUimm1_${idx}}, $${cUimm10spS_${idx}}, $${cUimm10sphi_${idx}}, $${cUimm10splo_${idx}}, $${cUimm2_${idx}}, $${cUimm7hi_${idx}}, $${cUimm7lo_${idx}}, $${cUimm8hi_${idx}}, $${cUimm8lo_${idx}}, $${cUimm8spS_${idx}}, $${cUimm8sphi_${idx}}, $${cUimm8splo_${idx}}, $${cUimm9hi_${idx}}, $${cUimm9lo_${idx}}, $${cUimm9spS_${idx}}, $${cUimm9sphi_${idx}}, $${cUimm9splo_${idx}}, $${csr_${idx}}, $${fm_${idx}}, $${funct2_${idx}}, $${funct3_${idx}}, $${funct7_${idx}}, $${imm12_${idx}}, $${imm12hi_${idx}}, $${imm12lo_${idx}}, $${imm2_${idx}}, $${imm20_${idx}}, $${imm3_${idx}}, $${imm4_${idx}}, $${imm5_${idx}}, $${imm6_${idx}}, $${jimm20_${idx}}, $${nf_${idx}}, $${opcode_${idx}}, $${pred_${idx}}, $${rc_${idx}}, $${rd_${idx}}, $${rdN0_${idx}}, $${rdN2_${idx}}, $${rdP_${idx}}, $${rdRs1_${idx}}, $${rdRs1N0_${idx}}, $${rdRs1P_${idx}}, $${rl_${idx}}, $${rm_${idx}}, $${rnum_${idx}}, $${rs1_${idx}}, $${rs1N0_${idx}}, $${rs1P_${idx}}, $${rs2_${idx}}, $${rs2P_${idx}}, $${rs3_${idx}}, $${rt_${idx}}, $${shamtd_${idx}}, $${shamtq_${idx}}, $${shamtw_${idx}}, $${shamtw4_${idx}}, $${simm5_${idx}}, $${succ_${idx}}, $${vd_${idx}}, $${vm_${idx}}, $${vs1_${idx}}, $${vs2_${idx}}, $${vs3_${idx}}, $${wd_${idx}}, $${zimm_${idx}}, $${zimm10_${idx}}, $${zimm11_${idx}}, $${zimm5_${idx}}, $${zimm6hi_${idx}}, $${zimm6lo_${idx}}"
}
