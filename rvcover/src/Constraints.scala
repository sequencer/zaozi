// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: 2025 Jianhao Ye <Clo91eaf@qq.com>
package me.jiuyang.rvcover

import me.jiuyang.smtlib.default.{*, given}
import me.jiuyang.smtlib.tpe.*

import org.llvm.mlir.scalalib.{Block, Context, Location, LocationApi, Operation, Type, Value, given}

import java.lang.foreign.Arena

// format: off

// ================= AUTO GENERATED BY RISCV_OPCODES =======================
def amoopRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].amoop >= start.S & summon[Index].amoop < end.S)
def aqRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].aq >= start.S & summon[Index].aq < end.S)
def aqrlRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].aqrl >= start.S & summon[Index].aqrl < end.S)
def bimm12hiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].bimm12hi >= start.S & summon[Index].bimm12hi < end.S)
def bimm12loRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].bimm12lo >= start.S & summon[Index].bimm12lo < end.S)
def bsRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].bs >= start.S & summon[Index].bs < end.S)
def cBimm9hiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cBimm9hi >= start.S & summon[Index].cBimm9hi < end.S)
def cBimm9loRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cBimm9lo >= start.S & summon[Index].cBimm9lo < end.S)
def cImm12Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cImm12 >= start.S & summon[Index].cImm12 < end.S)
def cImm6hiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cImm6hi >= start.S & summon[Index].cImm6hi < end.S)
def cImm6loRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cImm6lo >= start.S & summon[Index].cImm6lo < end.S)
def cIndexRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cIndex >= start.S & summon[Index].cIndex < end.S)
def cNzimm10hiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cNzimm10hi >= start.S & summon[Index].cNzimm10hi < end.S)
def cNzimm10loRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cNzimm10lo >= start.S & summon[Index].cNzimm10lo < end.S)
def cNzimm18hiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cNzimm18hi >= start.S & summon[Index].cNzimm18hi < end.S)
def cNzimm18loRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cNzimm18lo >= start.S & summon[Index].cNzimm18lo < end.S)
def cNzimm6hiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cNzimm6hi >= start.S & summon[Index].cNzimm6hi < end.S)
def cNzimm6loRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cNzimm6lo >= start.S & summon[Index].cNzimm6lo < end.S)
def cNzuimm10Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cNzuimm10 >= start.S & summon[Index].cNzuimm10 < end.S)
def cNzuimm5Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cNzuimm5 >= start.S & summon[Index].cNzuimm5 < end.S)
def cNzuimm6hiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cNzuimm6hi >= start.S & summon[Index].cNzuimm6hi < end.S)
def cNzuimm6loRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cNzuimm6lo >= start.S & summon[Index].cNzuimm6lo < end.S)
def cRlistRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cRlist >= start.S & summon[Index].cRlist < end.S)
def cRs1N0Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cRs1N0 >= start.S & summon[Index].cRs1N0 < end.S)
def cRs2Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cRs2 >= start.S & summon[Index].cRs2 < end.S)
def cRs2N0Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cRs2N0 >= start.S & summon[Index].cRs2N0 < end.S)
def cSpimmRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cSpimm >= start.S & summon[Index].cSpimm < end.S)
def cSreg1Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cSreg1 >= start.S & summon[Index].cSreg1 < end.S)
def cSreg2Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cSreg2 >= start.S & summon[Index].cSreg2 < end.S)
def cUimm1Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cUimm1 >= start.S & summon[Index].cUimm1 < end.S)
def cUimm10spSRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cUimm10spS >= start.S & summon[Index].cUimm10spS < end.S)
def cUimm10sphiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cUimm10sphi >= start.S & summon[Index].cUimm10sphi < end.S)
def cUimm10sploRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cUimm10splo >= start.S & summon[Index].cUimm10splo < end.S)
def cUimm2Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cUimm2 >= start.S & summon[Index].cUimm2 < end.S)
def cUimm7hiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cUimm7hi >= start.S & summon[Index].cUimm7hi < end.S)
def cUimm7loRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cUimm7lo >= start.S & summon[Index].cUimm7lo < end.S)
def cUimm8hiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cUimm8hi >= start.S & summon[Index].cUimm8hi < end.S)
def cUimm8loRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cUimm8lo >= start.S & summon[Index].cUimm8lo < end.S)
def cUimm8spSRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cUimm8spS >= start.S & summon[Index].cUimm8spS < end.S)
def cUimm8sphiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cUimm8sphi >= start.S & summon[Index].cUimm8sphi < end.S)
def cUimm8sploRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cUimm8splo >= start.S & summon[Index].cUimm8splo < end.S)
def cUimm9hiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cUimm9hi >= start.S & summon[Index].cUimm9hi < end.S)
def cUimm9loRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cUimm9lo >= start.S & summon[Index].cUimm9lo < end.S)
def cUimm9spSRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cUimm9spS >= start.S & summon[Index].cUimm9spS < end.S)
def cUimm9sphiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cUimm9sphi >= start.S & summon[Index].cUimm9sphi < end.S)
def cUimm9sploRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].cUimm9splo >= start.S & summon[Index].cUimm9splo < end.S)
def csrRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].csr >= start.S & summon[Index].csr < end.S)
def fmRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].fm >= start.S & summon[Index].fm < end.S)
def funct2Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].funct2 >= start.S & summon[Index].funct2 < end.S)
def funct3Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].funct3 >= start.S & summon[Index].funct3 < end.S)
def funct7Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].funct7 >= start.S & summon[Index].funct7 < end.S)
def imm12Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].imm12 >= start.S & summon[Index].imm12 < end.S)
def imm12hiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].imm12hi >= start.S & summon[Index].imm12hi < end.S)
def imm12loRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].imm12lo >= start.S & summon[Index].imm12lo < end.S)
def imm2Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].imm2 >= start.S & summon[Index].imm2 < end.S)
def imm20Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].imm20 >= start.S & summon[Index].imm20 < end.S)
def imm3Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].imm3 >= start.S & summon[Index].imm3 < end.S)
def imm4Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].imm4 >= start.S & summon[Index].imm4 < end.S)
def imm5Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].imm5 >= start.S & summon[Index].imm5 < end.S)
def imm6Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].imm6 >= start.S & summon[Index].imm6 < end.S)
def jimm20Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].jimm20 >= start.S & summon[Index].jimm20 < end.S)
def nfRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].nf >= start.S & summon[Index].nf < end.S)
def opcodeRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].opcode >= start.S & summon[Index].opcode < end.S)
def predRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].pred >= start.S & summon[Index].pred < end.S)
def rcRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].rc >= start.S & summon[Index].rc < end.S)
def rdRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].rd >= start.S & summon[Index].rd < end.S)
def rdN0Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].rdN0 >= start.S & summon[Index].rdN0 < end.S)
def rdN2Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].rdN2 >= start.S & summon[Index].rdN2 < end.S)
def rdPRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].rdP >= start.S & summon[Index].rdP < end.S)
def rdRs1Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].rdRs1 >= start.S & summon[Index].rdRs1 < end.S)
def rdRs1N0Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].rdRs1N0 >= start.S & summon[Index].rdRs1N0 < end.S)
def rdRs1PRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].rdRs1P >= start.S & summon[Index].rdRs1P < end.S)
def rlRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].rl >= start.S & summon[Index].rl < end.S)
def rmRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].rm >= start.S & summon[Index].rm < end.S)
def rnumRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].rnum >= start.S & summon[Index].rnum < end.S)
def rs1Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].rs1 >= start.S & summon[Index].rs1 < end.S)
def rs1N0Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].rs1N0 >= start.S & summon[Index].rs1N0 < end.S)
def rs1PRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].rs1P >= start.S & summon[Index].rs1P < end.S)
def rs2Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].rs2 >= start.S & summon[Index].rs2 < end.S)
def rs2PRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].rs2P >= start.S & summon[Index].rs2P < end.S)
def rs3Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].rs3 >= start.S & summon[Index].rs3 < end.S)
def rtRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].rt >= start.S & summon[Index].rt < end.S)
def shamtdRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].shamtd >= start.S & summon[Index].shamtd < end.S)
def shamtqRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].shamtq >= start.S & summon[Index].shamtq < end.S)
def shamtwRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].shamtw >= start.S & summon[Index].shamtw < end.S)
def shamtw4Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].shamtw4 >= start.S & summon[Index].shamtw4 < end.S)
def simm5Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].simm5 >= start.S & summon[Index].simm5 < end.S)
def succRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].succ >= start.S & summon[Index].succ < end.S)
def vdRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].vd >= start.S & summon[Index].vd < end.S)
def vmRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].vm >= start.S & summon[Index].vm < end.S)
def vs1Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].vs1 >= start.S & summon[Index].vs1 < end.S)
def vs2Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].vs2 >= start.S & summon[Index].vs2 < end.S)
def vs3Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].vs3 >= start.S & summon[Index].vs3 < end.S)
def wdRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].wd >= start.S & summon[Index].wd < end.S)
def zimmRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].zimm >= start.S & summon[Index].zimm < end.S)
def zimm10Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].zimm10 >= start.S & summon[Index].zimm10 < end.S)
def zimm11Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].zimm11 >= start.S & summon[Index].zimm11 < end.S)
def zimm5Range(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].zimm5 >= start.S & summon[Index].zimm5 < end.S)
def zimm6hiRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].zimm6hi >= start.S & summon[Index].zimm6hi < end.S)
def zimm6loRange(start: Int, end: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].zimm6lo >= start.S & summon[Index].zimm6lo < end.S)


def hasAmoop()(using Arena, Context, Block, Index): Unit = amoopRange(0, 32)
def hasAq()(using Arena, Context, Block, Index): Unit = aqRange(0, 2)
def hasAqrl()(using Arena, Context, Block, Index): Unit = aqrlRange(0, 4)
def hasBimm12hi()(using Arena, Context, Block, Index): Unit = bimm12hiRange(0, 128)
def hasBimm12lo()(using Arena, Context, Block, Index): Unit = bimm12loRange(0, 32)
def hasBs()(using Arena, Context, Block, Index): Unit = bsRange(0, 4)
def hasCBimm9hi()(using Arena, Context, Block, Index): Unit = cBimm9hiRange(0, 8)
def hasCBimm9lo()(using Arena, Context, Block, Index): Unit = cBimm9loRange(0, 32)
def hasCImm12()(using Arena, Context, Block, Index): Unit = cImm12Range(0, 2048)
def hasCImm6hi()(using Arena, Context, Block, Index): Unit = cImm6hiRange(0, 2)
def hasCImm6lo()(using Arena, Context, Block, Index): Unit = cImm6loRange(0, 32)
def hasCIndex()(using Arena, Context, Block, Index): Unit = cIndexRange(0, 256)
def hasCNzimm10hi()(using Arena, Context, Block, Index): Unit = cNzimm10hiRange(0, 2)
def hasCNzimm10lo()(using Arena, Context, Block, Index): Unit = cNzimm10loRange(0, 32)
def hasCNzimm18hi()(using Arena, Context, Block, Index): Unit = cNzimm18hiRange(0, 2)
def hasCNzimm18lo()(using Arena, Context, Block, Index): Unit = cNzimm18loRange(0, 32)
def hasCNzimm6hi()(using Arena, Context, Block, Index): Unit = cNzimm6hiRange(0, 2)
def hasCNzimm6lo()(using Arena, Context, Block, Index): Unit = cNzimm6loRange(0, 32)
def hasCNzuimm10()(using Arena, Context, Block, Index): Unit = cNzuimm10Range(0, 256)
def hasCNzuimm5()(using Arena, Context, Block, Index): Unit = cNzuimm5Range(0, 32)
def hasCNzuimm6hi()(using Arena, Context, Block, Index): Unit = cNzuimm6hiRange(0, 2)
def hasCNzuimm6lo()(using Arena, Context, Block, Index): Unit = cNzuimm6loRange(0, 32)
def hasCRlist()(using Arena, Context, Block, Index): Unit = cRlistRange(0, 16)
def hasCRs1N0()(using Arena, Context, Block, Index): Unit = cRs1N0Range(0, 32)
def hasCRs2()(using Arena, Context, Block, Index): Unit = cRs2Range(0, 32)
def hasCRs2N0()(using Arena, Context, Block, Index): Unit = cRs2N0Range(0, 32)
def hasCSpimm()(using Arena, Context, Block, Index): Unit = cSpimmRange(0, 4)
def hasCSreg1()(using Arena, Context, Block, Index): Unit = cSreg1Range(0, 8)
def hasCSreg2()(using Arena, Context, Block, Index): Unit = cSreg2Range(0, 8)
def hasCUimm1()(using Arena, Context, Block, Index): Unit = cUimm1Range(0, 2)
def hasCUimm10spS()(using Arena, Context, Block, Index): Unit = cUimm10spSRange(0, 64)
def hasCUimm10sphi()(using Arena, Context, Block, Index): Unit = cUimm10sphiRange(0, 2)
def hasCUimm10splo()(using Arena, Context, Block, Index): Unit = cUimm10sploRange(0, 32)
def hasCUimm2()(using Arena, Context, Block, Index): Unit = cUimm2Range(0, 4)
def hasCUimm7hi()(using Arena, Context, Block, Index): Unit = cUimm7hiRange(0, 8)
def hasCUimm7lo()(using Arena, Context, Block, Index): Unit = cUimm7loRange(0, 4)
def hasCUimm8hi()(using Arena, Context, Block, Index): Unit = cUimm8hiRange(0, 8)
def hasCUimm8lo()(using Arena, Context, Block, Index): Unit = cUimm8loRange(0, 4)
def hasCUimm8spS()(using Arena, Context, Block, Index): Unit = cUimm8spSRange(0, 64)
def hasCUimm8sphi()(using Arena, Context, Block, Index): Unit = cUimm8sphiRange(0, 2)
def hasCUimm8splo()(using Arena, Context, Block, Index): Unit = cUimm8sploRange(0, 32)
def hasCUimm9hi()(using Arena, Context, Block, Index): Unit = cUimm9hiRange(0, 8)
def hasCUimm9lo()(using Arena, Context, Block, Index): Unit = cUimm9loRange(0, 4)
def hasCUimm9spS()(using Arena, Context, Block, Index): Unit = cUimm9spSRange(0, 64)
def hasCUimm9sphi()(using Arena, Context, Block, Index): Unit = cUimm9sphiRange(0, 2)
def hasCUimm9splo()(using Arena, Context, Block, Index): Unit = cUimm9sploRange(0, 32)
def hasCsr()(using Arena, Context, Block, Index): Unit = csrRange(0, 4096)
def hasFm()(using Arena, Context, Block, Index): Unit = fmRange(0, 16)
def hasFunct2()(using Arena, Context, Block, Index): Unit = funct2Range(0, 4)
def hasFunct3()(using Arena, Context, Block, Index): Unit = funct3Range(0, 8)
def hasFunct7()(using Arena, Context, Block, Index): Unit = funct7Range(0, 128)
def hasImm12()(using Arena, Context, Block, Index): Unit = imm12Range(0, 4096)
def hasImm12hi()(using Arena, Context, Block, Index): Unit = imm12hiRange(0, 128)
def hasImm12lo()(using Arena, Context, Block, Index): Unit = imm12loRange(0, 32)
def hasImm2()(using Arena, Context, Block, Index): Unit = imm2Range(0, 4)
def hasImm20()(using Arena, Context, Block, Index): Unit = imm20Range(0, 1048576)
def hasImm3()(using Arena, Context, Block, Index): Unit = imm3Range(0, 8)
def hasImm4()(using Arena, Context, Block, Index): Unit = imm4Range(0, 16)
def hasImm5()(using Arena, Context, Block, Index): Unit = imm5Range(0, 32)
def hasImm6()(using Arena, Context, Block, Index): Unit = imm6Range(0, 64)
def hasJimm20()(using Arena, Context, Block, Index): Unit = jimm20Range(0, 1048576)
def hasNf()(using Arena, Context, Block, Index): Unit = nfRange(0, 8)
def hasOpcode()(using Arena, Context, Block, Index): Unit = opcodeRange(0, 128)
def hasPred()(using Arena, Context, Block, Index): Unit = predRange(0, 16)
def hasRc()(using Arena, Context, Block, Index): Unit = rcRange(0, 32)
def hasRd()(using Arena, Context, Block, Index): Unit = rdRange(0, 32)
def hasRdN0()(using Arena, Context, Block, Index): Unit = rdN0Range(0, 32)
def hasRdN2()(using Arena, Context, Block, Index): Unit = rdN2Range(0, 32)
def hasRdP()(using Arena, Context, Block, Index): Unit = rdPRange(0, 8)
def hasRdRs1()(using Arena, Context, Block, Index): Unit = rdRs1Range(0, 32)
def hasRdRs1N0()(using Arena, Context, Block, Index): Unit = rdRs1N0Range(0, 32)
def hasRdRs1P()(using Arena, Context, Block, Index): Unit = rdRs1PRange(0, 8)
def hasRl()(using Arena, Context, Block, Index): Unit = rlRange(0, 2)
def hasRm()(using Arena, Context, Block, Index): Unit = rmRange(0, 8)
def hasRnum()(using Arena, Context, Block, Index): Unit = rnumRange(0, 16)
def hasRs1()(using Arena, Context, Block, Index): Unit = rs1Range(0, 32)
def hasRs1N0()(using Arena, Context, Block, Index): Unit = rs1N0Range(0, 32)
def hasRs1P()(using Arena, Context, Block, Index): Unit = rs1PRange(0, 8)
def hasRs2()(using Arena, Context, Block, Index): Unit = rs2Range(0, 32)
def hasRs2P()(using Arena, Context, Block, Index): Unit = rs2PRange(0, 8)
def hasRs3()(using Arena, Context, Block, Index): Unit = rs3Range(0, 32)
def hasRt()(using Arena, Context, Block, Index): Unit = rtRange(0, 32)
def hasShamtd()(using Arena, Context, Block, Index): Unit = shamtdRange(0, 64)
def hasShamtq()(using Arena, Context, Block, Index): Unit = shamtqRange(0, 128)
def hasShamtw()(using Arena, Context, Block, Index): Unit = shamtwRange(0, 32)
def hasShamtw4()(using Arena, Context, Block, Index): Unit = shamtw4Range(0, 16)
def hasSimm5()(using Arena, Context, Block, Index): Unit = simm5Range(0, 32)
def hasSucc()(using Arena, Context, Block, Index): Unit = succRange(0, 16)
def hasVd()(using Arena, Context, Block, Index): Unit = vdRange(0, 32)
def hasVm()(using Arena, Context, Block, Index): Unit = vmRange(0, 2)
def hasVs1()(using Arena, Context, Block, Index): Unit = vs1Range(0, 32)
def hasVs2()(using Arena, Context, Block, Index): Unit = vs2Range(0, 32)
def hasVs3()(using Arena, Context, Block, Index): Unit = vs3Range(0, 32)
def hasWd()(using Arena, Context, Block, Index): Unit = wdRange(0, 2)
def hasZimm()(using Arena, Context, Block, Index): Unit = zimmRange(0, 32)
def hasZimm10()(using Arena, Context, Block, Index): Unit = zimm10Range(0, 1024)
def hasZimm11()(using Arena, Context, Block, Index): Unit = zimm11Range(0, 2048)
def hasZimm5()(using Arena, Context, Block, Index): Unit = zimm5Range(0, 32)
def hasZimm6hi()(using Arena, Context, Block, Index): Unit = zimm6hiRange(0, 2)
def hasZimm6lo()(using Arena, Context, Block, Index): Unit = zimm6loRange(0, 32)


def nameId(idx: Int)(using Arena, Context, Block, Index): Unit = smtAssert(summon[Index].nameId === idx.S)
def isAdd()(using Arena, Context, Block, Index): Unit = 
  nameId(0)
  hasRd()
  hasRs1()
  hasRs2()

def isAddi()(using Arena, Context, Block, Index): Unit = 
  nameId(1)
  hasRd()
  hasRs1()
  hasImm12()

def isAnd()(using Arena, Context, Block, Index): Unit = 
  nameId(2)
  hasRd()
  hasRs1()
  hasRs2()

def isAndi()(using Arena, Context, Block, Index): Unit = 
  nameId(3)
  hasRd()
  hasRs1()
  hasImm12()

def isAuipc()(using Arena, Context, Block, Index): Unit = 
  nameId(4)
  hasRd()
  hasImm20()

def isBeq()(using Arena, Context, Block, Index): Unit = 
  nameId(5)
  hasBimm12lo()
  hasRs1()
  hasRs2()
  hasBimm12hi()

def isBge()(using Arena, Context, Block, Index): Unit = 
  nameId(6)
  hasBimm12lo()
  hasRs1()
  hasRs2()
  hasBimm12hi()

def isBgeu()(using Arena, Context, Block, Index): Unit = 
  nameId(7)
  hasBimm12lo()
  hasRs1()
  hasRs2()
  hasBimm12hi()

def isBlt()(using Arena, Context, Block, Index): Unit = 
  nameId(8)
  hasBimm12lo()
  hasRs1()
  hasRs2()
  hasBimm12hi()

def isBltu()(using Arena, Context, Block, Index): Unit = 
  nameId(9)
  hasBimm12lo()
  hasRs1()
  hasRs2()
  hasBimm12hi()

def isBne()(using Arena, Context, Block, Index): Unit = 
  nameId(10)
  hasBimm12lo()
  hasRs1()
  hasRs2()
  hasBimm12hi()

def isEbreak()(using Arena, Context, Block, Index): Unit = 
  nameId(11)

def isEcall()(using Arena, Context, Block, Index): Unit = 
  nameId(12)

def isFence()(using Arena, Context, Block, Index): Unit = 
  nameId(13)
  hasRd()
  hasRs1()
  hasSucc()
  hasPred()
  hasFm()

def isJal()(using Arena, Context, Block, Index): Unit = 
  nameId(14)
  hasRd()
  hasJimm20()

def isJalr()(using Arena, Context, Block, Index): Unit = 
  nameId(15)
  hasRd()
  hasRs1()
  hasImm12()

def isLb()(using Arena, Context, Block, Index): Unit = 
  nameId(16)
  hasRd()
  hasRs1()
  hasImm12()

def isLbu()(using Arena, Context, Block, Index): Unit = 
  nameId(17)
  hasRd()
  hasRs1()
  hasImm12()

def isLh()(using Arena, Context, Block, Index): Unit = 
  nameId(18)
  hasRd()
  hasRs1()
  hasImm12()

def isLhu()(using Arena, Context, Block, Index): Unit = 
  nameId(19)
  hasRd()
  hasRs1()
  hasImm12()

def isLui()(using Arena, Context, Block, Index): Unit = 
  nameId(20)
  hasRd()
  hasImm20()

def isLw()(using Arena, Context, Block, Index): Unit = 
  nameId(21)
  hasRd()
  hasRs1()
  hasImm12()

def isOr()(using Arena, Context, Block, Index): Unit = 
  nameId(22)
  hasRd()
  hasRs1()
  hasRs2()

def isOri()(using Arena, Context, Block, Index): Unit = 
  nameId(23)
  hasRd()
  hasRs1()
  hasImm12()

def isSb()(using Arena, Context, Block, Index): Unit = 
  nameId(24)
  hasImm12lo()
  hasRs1()
  hasRs2()
  hasImm12hi()

def isSh()(using Arena, Context, Block, Index): Unit = 
  nameId(25)
  hasImm12lo()
  hasRs1()
  hasRs2()
  hasImm12hi()

def isSll()(using Arena, Context, Block, Index): Unit = 
  nameId(26)
  hasRd()
  hasRs1()
  hasRs2()

def isSlt()(using Arena, Context, Block, Index): Unit = 
  nameId(27)
  hasRd()
  hasRs1()
  hasRs2()

def isSlti()(using Arena, Context, Block, Index): Unit = 
  nameId(28)
  hasRd()
  hasRs1()
  hasImm12()

def isSltiu()(using Arena, Context, Block, Index): Unit = 
  nameId(29)
  hasRd()
  hasRs1()
  hasImm12()

def isSltu()(using Arena, Context, Block, Index): Unit = 
  nameId(30)
  hasRd()
  hasRs1()
  hasRs2()

def isSra()(using Arena, Context, Block, Index): Unit = 
  nameId(31)
  hasRd()
  hasRs1()
  hasRs2()

def isSrl()(using Arena, Context, Block, Index): Unit = 
  nameId(32)
  hasRd()
  hasRs1()
  hasRs2()

def isSub()(using Arena, Context, Block, Index): Unit = 
  nameId(33)
  hasRd()
  hasRs1()
  hasRs2()

def isSw()(using Arena, Context, Block, Index): Unit = 
  nameId(34)
  hasImm12lo()
  hasRs1()
  hasRs2()
  hasImm12hi()

def isXor()(using Arena, Context, Block, Index): Unit = 
  nameId(35)
  hasRd()
  hasRs1()
  hasRs2()

def isXori()(using Arena, Context, Block, Index): Unit = 
  nameId(36)
  hasRd()
  hasRs1()
  hasImm12()

def isMret()(using Arena, Context, Block, Index): Unit = 
  nameId(37)

def isWfi()(using Arena, Context, Block, Index): Unit = 
  nameId(38)

def isCsrrc()(using Arena, Context, Block, Index): Unit = 
  nameId(39)
  hasRd()
  hasRs1()
  hasCsr()

def isCsrrci()(using Arena, Context, Block, Index): Unit = 
  nameId(40)
  hasRd()
  hasZimm()
  hasCsr()

def isCsrrs()(using Arena, Context, Block, Index): Unit = 
  nameId(41)
  hasRd()
  hasRs1()
  hasCsr()

def isCsrrsi()(using Arena, Context, Block, Index): Unit = 
  nameId(42)
  hasRd()
  hasZimm()
  hasCsr()

def isCsrrw()(using Arena, Context, Block, Index): Unit = 
  nameId(43)
  hasRd()
  hasRs1()
  hasCsr()

def isCsrrwi()(using Arena, Context, Block, Index): Unit = 
  nameId(44)
  hasRd()
  hasZimm()
  hasCsr()

def isFenceI()(using Arena, Context, Block, Index): Unit = 
  nameId(45)
  hasRd()
  hasRs1()
  hasImm12()


case class Index(val idx: Int)(using Arena, Context, Block) {
  val nameId = smtValue(s"nameId_${idx}", SInt)
  val amoop = smtValue(s"amoop_${idx}", SInt)
  val aq = smtValue(s"aq_${idx}", SInt)
  val aqrl = smtValue(s"aqrl_${idx}", SInt)
  val bimm12hi = smtValue(s"bimm12hi_${idx}", SInt)
  val bimm12lo = smtValue(s"bimm12lo_${idx}", SInt)
  val bs = smtValue(s"bs_${idx}", SInt)
  val cBimm9hi = smtValue(s"c_bimm9hi_${idx}", SInt)
  val cBimm9lo = smtValue(s"c_bimm9lo_${idx}", SInt)
  val cImm12 = smtValue(s"c_imm12_${idx}", SInt)
  val cImm6hi = smtValue(s"c_imm6hi_${idx}", SInt)
  val cImm6lo = smtValue(s"c_imm6lo_${idx}", SInt)
  val cIndex = smtValue(s"c_index_${idx}", SInt)
  val cNzimm10hi = smtValue(s"c_nzimm10hi_${idx}", SInt)
  val cNzimm10lo = smtValue(s"c_nzimm10lo_${idx}", SInt)
  val cNzimm18hi = smtValue(s"c_nzimm18hi_${idx}", SInt)
  val cNzimm18lo = smtValue(s"c_nzimm18lo_${idx}", SInt)
  val cNzimm6hi = smtValue(s"c_nzimm6hi_${idx}", SInt)
  val cNzimm6lo = smtValue(s"c_nzimm6lo_${idx}", SInt)
  val cNzuimm10 = smtValue(s"c_nzuimm10_${idx}", SInt)
  val cNzuimm5 = smtValue(s"c_nzuimm5_${idx}", SInt)
  val cNzuimm6hi = smtValue(s"c_nzuimm6hi_${idx}", SInt)
  val cNzuimm6lo = smtValue(s"c_nzuimm6lo_${idx}", SInt)
  val cRlist = smtValue(s"c_rlist_${idx}", SInt)
  val cRs1N0 = smtValue(s"c_rs1_n0_${idx}", SInt)
  val cRs2 = smtValue(s"c_rs2_${idx}", SInt)
  val cRs2N0 = smtValue(s"c_rs2_n0_${idx}", SInt)
  val cSpimm = smtValue(s"c_spimm_${idx}", SInt)
  val cSreg1 = smtValue(s"c_sreg1_${idx}", SInt)
  val cSreg2 = smtValue(s"c_sreg2_${idx}", SInt)
  val cUimm1 = smtValue(s"c_uimm1_${idx}", SInt)
  val cUimm10spS = smtValue(s"c_uimm10sp_s_${idx}", SInt)
  val cUimm10sphi = smtValue(s"c_uimm10sphi_${idx}", SInt)
  val cUimm10splo = smtValue(s"c_uimm10splo_${idx}", SInt)
  val cUimm2 = smtValue(s"c_uimm2_${idx}", SInt)
  val cUimm7hi = smtValue(s"c_uimm7hi_${idx}", SInt)
  val cUimm7lo = smtValue(s"c_uimm7lo_${idx}", SInt)
  val cUimm8hi = smtValue(s"c_uimm8hi_${idx}", SInt)
  val cUimm8lo = smtValue(s"c_uimm8lo_${idx}", SInt)
  val cUimm8spS = smtValue(s"c_uimm8sp_s_${idx}", SInt)
  val cUimm8sphi = smtValue(s"c_uimm8sphi_${idx}", SInt)
  val cUimm8splo = smtValue(s"c_uimm8splo_${idx}", SInt)
  val cUimm9hi = smtValue(s"c_uimm9hi_${idx}", SInt)
  val cUimm9lo = smtValue(s"c_uimm9lo_${idx}", SInt)
  val cUimm9spS = smtValue(s"c_uimm9sp_s_${idx}", SInt)
  val cUimm9sphi = smtValue(s"c_uimm9sphi_${idx}", SInt)
  val cUimm9splo = smtValue(s"c_uimm9splo_${idx}", SInt)
  val csr = smtValue(s"csr_${idx}", SInt)
  val fm = smtValue(s"fm_${idx}", SInt)
  val funct2 = smtValue(s"funct2_${idx}", SInt)
  val funct3 = smtValue(s"funct3_${idx}", SInt)
  val funct7 = smtValue(s"funct7_${idx}", SInt)
  val imm12 = smtValue(s"imm12_${idx}", SInt)
  val imm12hi = smtValue(s"imm12hi_${idx}", SInt)
  val imm12lo = smtValue(s"imm12lo_${idx}", SInt)
  val imm2 = smtValue(s"imm2_${idx}", SInt)
  val imm20 = smtValue(s"imm20_${idx}", SInt)
  val imm3 = smtValue(s"imm3_${idx}", SInt)
  val imm4 = smtValue(s"imm4_${idx}", SInt)
  val imm5 = smtValue(s"imm5_${idx}", SInt)
  val imm6 = smtValue(s"imm6_${idx}", SInt)
  val jimm20 = smtValue(s"jimm20_${idx}", SInt)
  val nf = smtValue(s"nf_${idx}", SInt)
  val opcode = smtValue(s"opcode_${idx}", SInt)
  val pred = smtValue(s"pred_${idx}", SInt)
  val rc = smtValue(s"rc_${idx}", SInt)
  val rd = smtValue(s"rd_${idx}", SInt)
  val rdN0 = smtValue(s"rd_n0_${idx}", SInt)
  val rdN2 = smtValue(s"rd_n2_${idx}", SInt)
  val rdP = smtValue(s"rd_p_${idx}", SInt)
  val rdRs1 = smtValue(s"rd_rs1_${idx}", SInt)
  val rdRs1N0 = smtValue(s"rd_rs1_n0_${idx}", SInt)
  val rdRs1P = smtValue(s"rd_rs1_p_${idx}", SInt)
  val rl = smtValue(s"rl_${idx}", SInt)
  val rm = smtValue(s"rm_${idx}", SInt)
  val rnum = smtValue(s"rnum_${idx}", SInt)
  val rs1 = smtValue(s"rs1_${idx}", SInt)
  val rs1N0 = smtValue(s"rs1_n0_${idx}", SInt)
  val rs1P = smtValue(s"rs1_p_${idx}", SInt)
  val rs2 = smtValue(s"rs2_${idx}", SInt)
  val rs2P = smtValue(s"rs2_p_${idx}", SInt)
  val rs3 = smtValue(s"rs3_${idx}", SInt)
  val rt = smtValue(s"rt_${idx}", SInt)
  val shamtd = smtValue(s"shamtd_${idx}", SInt)
  val shamtq = smtValue(s"shamtq_${idx}", SInt)
  val shamtw = smtValue(s"shamtw_${idx}", SInt)
  val shamtw4 = smtValue(s"shamtw4_${idx}", SInt)
  val simm5 = smtValue(s"simm5_${idx}", SInt)
  val succ = smtValue(s"succ_${idx}", SInt)
  val vd = smtValue(s"vd_${idx}", SInt)
  val vm = smtValue(s"vm_${idx}", SInt)
  val vs1 = smtValue(s"vs1_${idx}", SInt)
  val vs2 = smtValue(s"vs2_${idx}", SInt)
  val vs3 = smtValue(s"vs3_${idx}", SInt)
  val wd = smtValue(s"wd_${idx}", SInt)
  val zimm = smtValue(s"zimm_${idx}", SInt)
  val zimm10 = smtValue(s"zimm10_${idx}", SInt)
  val zimm11 = smtValue(s"zimm11_${idx}", SInt)
  val zimm5 = smtValue(s"zimm5_${idx}", SInt)
  val zimm6hi = smtValue(s"zimm6hi_${idx}", SInt)
  val zimm6lo = smtValue(s"zimm6lo_${idx}", SInt)

  override def toString: String = s"${idx}, $${nameId_${idx}}, $${amoop_${idx}}, $${aq_${idx}}, $${aqrl_${idx}}, $${bimm12hi_${idx}}, $${bimm12lo_${idx}}, $${bs_${idx}}, $${cBimm9hi_${idx}}, $${cBimm9lo_${idx}}, $${cImm12_${idx}}, $${cImm6hi_${idx}}, $${cImm6lo_${idx}}, $${cIndex_${idx}}, $${cNzimm10hi_${idx}}, $${cNzimm10lo_${idx}}, $${cNzimm18hi_${idx}}, $${cNzimm18lo_${idx}}, $${cNzimm6hi_${idx}}, $${cNzimm6lo_${idx}}, $${cNzuimm10_${idx}}, $${cNzuimm5_${idx}}, $${cNzuimm6hi_${idx}}, $${cNzuimm6lo_${idx}}, $${cRlist_${idx}}, $${cRs1N0_${idx}}, $${cRs2_${idx}}, $${cRs2N0_${idx}}, $${cSpimm_${idx}}, $${cSreg1_${idx}}, $${cSreg2_${idx}}, $${cUimm1_${idx}}, $${cUimm10spS_${idx}}, $${cUimm10sphi_${idx}}, $${cUimm10splo_${idx}}, $${cUimm2_${idx}}, $${cUimm7hi_${idx}}, $${cUimm7lo_${idx}}, $${cUimm8hi_${idx}}, $${cUimm8lo_${idx}}, $${cUimm8spS_${idx}}, $${cUimm8sphi_${idx}}, $${cUimm8splo_${idx}}, $${cUimm9hi_${idx}}, $${cUimm9lo_${idx}}, $${cUimm9spS_${idx}}, $${cUimm9sphi_${idx}}, $${cUimm9splo_${idx}}, $${csr_${idx}}, $${fm_${idx}}, $${funct2_${idx}}, $${funct3_${idx}}, $${funct7_${idx}}, $${imm12_${idx}}, $${imm12hi_${idx}}, $${imm12lo_${idx}}, $${imm2_${idx}}, $${imm20_${idx}}, $${imm3_${idx}}, $${imm4_${idx}}, $${imm5_${idx}}, $${imm6_${idx}}, $${jimm20_${idx}}, $${nf_${idx}}, $${opcode_${idx}}, $${pred_${idx}}, $${rc_${idx}}, $${rd_${idx}}, $${rdN0_${idx}}, $${rdN2_${idx}}, $${rdP_${idx}}, $${rdRs1_${idx}}, $${rdRs1N0_${idx}}, $${rdRs1P_${idx}}, $${rl_${idx}}, $${rm_${idx}}, $${rnum_${idx}}, $${rs1_${idx}}, $${rs1N0_${idx}}, $${rs1P_${idx}}, $${rs2_${idx}}, $${rs2P_${idx}}, $${rs3_${idx}}, $${rt_${idx}}, $${shamtd_${idx}}, $${shamtq_${idx}}, $${shamtw_${idx}}, $${shamtw4_${idx}}, $${simm5_${idx}}, $${succ_${idx}}, $${vd_${idx}}, $${vm_${idx}}, $${vs1_${idx}}, $${vs2_${idx}}, $${vs3_${idx}}, $${wd_${idx}}, $${zimm_${idx}}, $${zimm10_${idx}}, $${zimm11_${idx}}, $${zimm5_${idx}}, $${zimm6hi_${idx}}, $${zimm6lo_${idx}}"
}
    