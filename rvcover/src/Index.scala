// SPDX-License-Identifier: Apache-2.0
// SPDX-FileCopyrightText: 2025 Jianhao Ye <Clo91eaf@qq.com>
package me.jiuyang.rvcover

import me.jiuyang.smtlib.default.{*, given}
import me.jiuyang.smtlib.tpe.*

import org.llvm.mlir.scalalib.capi.ir.{Block, Context, Location, LocationApi, Operation, Type, Value, given}

import java.lang.foreign.Arena

// format: off
// ================= AUTO GENERATED BY GenerateConstraints.scala =======================
// TODO: this file is individually generated, because of the stack overflow issue, need to fix
case class Index(val idx: Int)(using Arena, Context, Block) {
  val nameId = smtValue(s"nameId_${idx}", SInt)
  val amoop = smtValue(s"amoop_${idx}", SInt)
  val aq = smtValue(s"aq_${idx}", SInt)
  val aqrl = smtValue(s"aqrl_${idx}", SInt)
  val bimm12hi = smtValue(s"bimm12hi_${idx}", SInt)
  val bimm12lo = smtValue(s"bimm12lo_${idx}", SInt)
  val bs = smtValue(s"bs_${idx}", SInt)
  val cBimm9hi = smtValue(s"c_bimm9hi_${idx}", SInt)
  val cBimm9lo = smtValue(s"c_bimm9lo_${idx}", SInt)
  val cImm12 = smtValue(s"c_imm12_${idx}", SInt)
  val cImm6hi = smtValue(s"c_imm6hi_${idx}", SInt)
  val cImm6lo = smtValue(s"c_imm6lo_${idx}", SInt)
  val cIndex = smtValue(s"c_index_${idx}", SInt)
  val cNzimm10hi = smtValue(s"c_nzimm10hi_${idx}", SInt)
  val cNzimm10lo = smtValue(s"c_nzimm10lo_${idx}", SInt)
  val cNzimm18hi = smtValue(s"c_nzimm18hi_${idx}", SInt)
  val cNzimm18lo = smtValue(s"c_nzimm18lo_${idx}", SInt)
  val cNzimm6hi = smtValue(s"c_nzimm6hi_${idx}", SInt)
  val cNzimm6lo = smtValue(s"c_nzimm6lo_${idx}", SInt)
  val cNzuimm10 = smtValue(s"c_nzuimm10_${idx}", SInt)
  val cNzuimm5 = smtValue(s"c_nzuimm5_${idx}", SInt)
  val cNzuimm6hi = smtValue(s"c_nzuimm6hi_${idx}", SInt)
  val cNzuimm6lo = smtValue(s"c_nzuimm6lo_${idx}", SInt)
  val cRlist = smtValue(s"c_rlist_${idx}", SInt)
  val cRs1N0 = smtValue(s"c_rs1_n0_${idx}", SInt)
  val cRs2 = smtValue(s"c_rs2_${idx}", SInt)
  val cRs2N0 = smtValue(s"c_rs2_n0_${idx}", SInt)
  val cSpimm = smtValue(s"c_spimm_${idx}", SInt)
  val cSreg1 = smtValue(s"c_sreg1_${idx}", SInt)
  val cSreg2 = smtValue(s"c_sreg2_${idx}", SInt)
  val cUimm1 = smtValue(s"c_uimm1_${idx}", SInt)
  val cUimm10spS = smtValue(s"c_uimm10sp_s_${idx}", SInt)
  val cUimm10sphi = smtValue(s"c_uimm10sphi_${idx}", SInt)
  val cUimm10splo = smtValue(s"c_uimm10splo_${idx}", SInt)
  val cUimm2 = smtValue(s"c_uimm2_${idx}", SInt)
  val cUimm7hi = smtValue(s"c_uimm7hi_${idx}", SInt)
  val cUimm7lo = smtValue(s"c_uimm7lo_${idx}", SInt)
  val cUimm8hi = smtValue(s"c_uimm8hi_${idx}", SInt)
  val cUimm8lo = smtValue(s"c_uimm8lo_${idx}", SInt)
  val cUimm8spS = smtValue(s"c_uimm8sp_s_${idx}", SInt)
  val cUimm8sphi = smtValue(s"c_uimm8sphi_${idx}", SInt)
  val cUimm8splo = smtValue(s"c_uimm8splo_${idx}", SInt)
  val cUimm9hi = smtValue(s"c_uimm9hi_${idx}", SInt)
  val cUimm9lo = smtValue(s"c_uimm9lo_${idx}", SInt)
  val cUimm9spS = smtValue(s"c_uimm9sp_s_${idx}", SInt)
  val cUimm9sphi = smtValue(s"c_uimm9sphi_${idx}", SInt)
  val cUimm9splo = smtValue(s"c_uimm9splo_${idx}", SInt)
  val csr = smtValue(s"csr_${idx}", SInt)
  val fm = smtValue(s"fm_${idx}", SInt)
  val funct2 = smtValue(s"funct2_${idx}", SInt)
  val funct3 = smtValue(s"funct3_${idx}", SInt)
  val funct7 = smtValue(s"funct7_${idx}", SInt)
  val imm12 = smtValue(s"imm12_${idx}", SInt)
  val imm12hi = smtValue(s"imm12hi_${idx}", SInt)
  val imm12lo = smtValue(s"imm12lo_${idx}", SInt)
  val imm2 = smtValue(s"imm2_${idx}", SInt)
  val imm20 = smtValue(s"imm20_${idx}", SInt)
  val imm3 = smtValue(s"imm3_${idx}", SInt)
  val imm4 = smtValue(s"imm4_${idx}", SInt)
  val imm5 = smtValue(s"imm5_${idx}", SInt)
  val imm6 = smtValue(s"imm6_${idx}", SInt)
  val jimm20 = smtValue(s"jimm20_${idx}", SInt)
  val nf = smtValue(s"nf_${idx}", SInt)
  val opcode = smtValue(s"opcode_${idx}", SInt)
  val pred = smtValue(s"pred_${idx}", SInt)
  val rc = smtValue(s"rc_${idx}", SInt)
  val rd = smtValue(s"rd_${idx}", SInt)
  val rdN0 = smtValue(s"rd_n0_${idx}", SInt)
  val rdN2 = smtValue(s"rd_n2_${idx}", SInt)
  val rdP = smtValue(s"rd_p_${idx}", SInt)
  val rdRs1 = smtValue(s"rd_rs1_${idx}", SInt)
  val rdRs1N0 = smtValue(s"rd_rs1_n0_${idx}", SInt)
  val rdRs1P = smtValue(s"rd_rs1_p_${idx}", SInt)
  val rl = smtValue(s"rl_${idx}", SInt)
  val rm = smtValue(s"rm_${idx}", SInt)
  val rnum = smtValue(s"rnum_${idx}", SInt)
  val rs1 = smtValue(s"rs1_${idx}", SInt)
  val rs1N0 = smtValue(s"rs1_n0_${idx}", SInt)
  val rs1P = smtValue(s"rs1_p_${idx}", SInt)
  val rs2 = smtValue(s"rs2_${idx}", SInt)
  val rs2P = smtValue(s"rs2_p_${idx}", SInt)
  val rs3 = smtValue(s"rs3_${idx}", SInt)
  val rt = smtValue(s"rt_${idx}", SInt)
  val shamtd = smtValue(s"shamtd_${idx}", SInt)
  val shamtq = smtValue(s"shamtq_${idx}", SInt)
  val shamtw = smtValue(s"shamtw_${idx}", SInt)
  val shamtw4 = smtValue(s"shamtw4_${idx}", SInt)
  val simm5 = smtValue(s"simm5_${idx}", SInt)
  val succ = smtValue(s"succ_${idx}", SInt)
  val vd = smtValue(s"vd_${idx}", SInt)
  val vm = smtValue(s"vm_${idx}", SInt)
  val vs1 = smtValue(s"vs1_${idx}", SInt)
  val vs2 = smtValue(s"vs2_${idx}", SInt)
  val vs3 = smtValue(s"vs3_${idx}", SInt)
  val wd = smtValue(s"wd_${idx}", SInt)
  val zimm = smtValue(s"zimm_${idx}", SInt)
  val zimm10 = smtValue(s"zimm10_${idx}", SInt)
  val zimm11 = smtValue(s"zimm11_${idx}", SInt)
  val zimm5 = smtValue(s"zimm5_${idx}", SInt)
  val zimm6hi = smtValue(s"zimm6hi_${idx}", SInt)
  val zimm6lo = smtValue(s"zimm6lo_${idx}", SInt)

  override def toString: String = s"${idx}, $${nameId_${idx}}, $${amoop_${idx}}, $${aq_${idx}}, $${aqrl_${idx}}, $${bimm12hi_${idx}}, $${bimm12lo_${idx}}, $${bs_${idx}}, $${cBimm9hi_${idx}}, $${cBimm9lo_${idx}}, $${cImm12_${idx}}, $${cImm6hi_${idx}}, $${cImm6lo_${idx}}, $${cIndex_${idx}}, $${cNzimm10hi_${idx}}, $${cNzimm10lo_${idx}}, $${cNzimm18hi_${idx}}, $${cNzimm18lo_${idx}}, $${cNzimm6hi_${idx}}, $${cNzimm6lo_${idx}}, $${cNzuimm10_${idx}}, $${cNzuimm5_${idx}}, $${cNzuimm6hi_${idx}}, $${cNzuimm6lo_${idx}}, $${cRlist_${idx}}, $${cRs1N0_${idx}}, $${cRs2_${idx}}, $${cRs2N0_${idx}}, $${cSpimm_${idx}}, $${cSreg1_${idx}}, $${cSreg2_${idx}}, $${cUimm1_${idx}}, $${cUimm10spS_${idx}}, $${cUimm10sphi_${idx}}, $${cUimm10splo_${idx}}, $${cUimm2_${idx}}, $${cUimm7hi_${idx}}, $${cUimm7lo_${idx}}, $${cUimm8hi_${idx}}, $${cUimm8lo_${idx}}, $${cUimm8spS_${idx}}, $${cUimm8sphi_${idx}}, $${cUimm8splo_${idx}}, $${cUimm9hi_${idx}}, $${cUimm9lo_${idx}}, $${cUimm9spS_${idx}}, $${cUimm9sphi_${idx}}, $${cUimm9splo_${idx}}, $${csr_${idx}}, $${fm_${idx}}, $${funct2_${idx}}, $${funct3_${idx}}, $${funct7_${idx}}, $${imm12_${idx}}, $${imm12hi_${idx}}, $${imm12lo_${idx}}, $${imm2_${idx}}, $${imm20_${idx}}, $${imm3_${idx}}, $${imm4_${idx}}, $${imm5_${idx}}, $${imm6_${idx}}, $${jimm20_${idx}}, $${nf_${idx}}, $${opcode_${idx}}, $${pred_${idx}}, $${rc_${idx}}, $${rd_${idx}}, $${rdN0_${idx}}, $${rdN2_${idx}}, $${rdP_${idx}}, $${rdRs1_${idx}}, $${rdRs1N0_${idx}}, $${rdRs1P_${idx}}, $${rl_${idx}}, $${rm_${idx}}, $${rnum_${idx}}, $${rs1_${idx}}, $${rs1N0_${idx}}, $${rs1P_${idx}}, $${rs2_${idx}}, $${rs2P_${idx}}, $${rs3_${idx}}, $${rt_${idx}}, $${shamtd_${idx}}, $${shamtq_${idx}}, $${shamtw_${idx}}, $${shamtw4_${idx}}, $${simm5_${idx}}, $${succ_${idx}}, $${vd_${idx}}, $${vm_${idx}}, $${vs1_${idx}}, $${vs2_${idx}}, $${vs3_${idx}}, $${wd_${idx}}, $${zimm_${idx}}, $${zimm10_${idx}}, $${zimm11_${idx}}, $${zimm5_${idx}}, $${zimm6hi_${idx}}, $${zimm6lo_${idx}}"
}
